import logging
import telebot
import os
import openai
import json
from typing import Final
from telebot.types import BotCommand
import time
import io
from telebot import types
import docx
import pdfplumber
import datetime
import requests
from database import *
import schedule
from yookassa import Configuration, Payment
import uuid
import tempfile
from pydub import AudioSegment
from ddgs import DDGS
import re
import base64 
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
print(f"Connecting to DB: {os.getenv('DB_NAME')}, User: {os.getenv('DB_USER')}, Host: {os.getenv('DB_HOST')}")
connect_to_db()

MIN_TOKENS_THRESHOLD: Final = 5000
FREE_DAILY_TOKENS: Final = 10000
PLAN_NAMES = {
    "free": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
    "plus_trial": "–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus (3 –¥–Ω—è)",
    "plus_month": "–ü–æ–¥–ø–∏—Å–∫–∞ Plus (–º–µ—Å—è—Ü)"
}

ASSISTANT_DESCRIPTIONS = {
    "universal_expert": "–æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.",
    "fintech": "—Å–æ–≤–µ—Ç—ã –ø–æ –æ–Ω–ª–∞–π–Ω-–±–∞–Ω–∫–∞–º, –ø–ª–∞—Ç–µ–∂–∞–º, –ø–µ—Ä–µ–≤–æ–¥–∞–º, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º –¥–ª—è –¥–µ–Ω–µ–≥ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.",
    "personal_finance": "–∫–∞–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç, –∫–æ–ø–∏—Ç—å –∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–µ–Ω—å–≥–∏.",
    "investments": "—Ñ–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –≤–∞–ª—é—Ç—ã. –° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –∏ –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å.",
    "business_marketing": "–∫–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–∏–∑–Ω–µ—Å, –ø—Ä–∏–≤–ª–µ—á—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏.",
    "cybersecurity": "–∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö, —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç –≤–∑–ª–æ–º–æ–≤ –∏ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤.",
    "comm_skills": "–∫–∞–∫ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å, –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è –∏ –∏–∑–±–µ–≥–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.",
    "legal_advisor": "–ø–æ–º–æ—â—å –≤ –±—ã—Ç–æ–≤—ã—Ö –∏ –¥–µ–ª–æ–≤—ã—Ö –ø—Ä–∞–≤–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö, —Ä–∞–∑–±–æ—Ä –¥–æ–≥–æ–≤–æ—Ä–æ–≤, –∑–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π.",
    "psychology_selfdev": "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º, –ø–æ–≤—ã—à–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç."
}

logger = telebot.logger
telebot.logger.setLevel(logging.INFO)
pay_token = os.getenv('PAY_TOKEN')
bot = telebot.TeleBot(os.getenv('BOT_TOKEN'), threaded=False)
openai.api_key = os.getenv('OPENAI_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
Configuration.account_id = os.getenv("YOOKASSA_SHOP_ID")
Configuration.secret_key = os.getenv("YOOKASSA_SECRET_KEY")

print(f"[DEBUG] ShopID: {Configuration.account_id}")
print(f"[DEBUG] YOOKASSA_SECRET_KEY: {os.getenv('YOOKASSA_SECRET_KEY')}")

# ======== WEB SEARCH (DDGS) ========
import json
from textwrap import shorten

def _call_search_api(search_query):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DDGS –∏ –≤—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ç—ã."""
    banner = "="*60
    print(f"\n{banner}\n[DDGS SEARCH] –ó–∞–ø—Ä–æ—Å -> {search_query}\n{banner}")
    try:
        with DDGS() as ddgs:
            results = list(ddgs.text(search_query, region="ru-ru", safesearch="moderate", max_results=None))

        print(f"[DDGS] –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ —Å—ã—Ä–æ–π –≤—ã–¥–∞—á–µ–π: {len(results)}")

        formatted_results = []
        filtered_out = []
        for i, result in enumerate(results, start=1):
            title = result.get('title')
            href = result.get('href')
            body = result.get('body', '') or ""
            reason = None
            if not title:
                reason = "no title"
            elif not href:
                reason = "no href"
            elif href.endswith("wiktionary.org/wiki/"):
                reason = "wiktionary filter"
            if reason:
                filtered_out.append((i, href, reason))
                continue

            formatted = {
                'title': title,
                'snippet': body,
                'link': href
            }
            formatted_results.append(formatted)

        print(f"[DDGS] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(formatted_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {len(filtered_out)})")

        # –ø–µ—á–∞—Ç–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        if formatted_results:
            print("\n[DDGS] –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ (index, title, link, snippet...):")
            max_to_show = 5
            for idx, r in enumerate(formatted_results[:max_to_show], start=1):
                snippet_clean = r['snippet'].replace('\n', ' ')
                print(f" {idx:>2}. {shorten(r['title'], 100)}")
                print(f"      ‚Üí {r['link']}")
                print(f"      snip: {shorten(snippet_clean, 180)}\n")
            if len(formatted_results) > max_to_show:
                print(f"  ... –∏ –µ—â—ë {len(formatted_results) - max_to_show} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫—Ä—ã—Ç–æ.\n")
        else:
            print("[DDGS] –ù–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞.")


        if filtered_out:
            print("[DDGS] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
            for idx, href, why in filtered_out[:10]:
                print(f"  - raw#{idx}: {href} (reason: {why})")
            if len(filtered_out) > 10:
                print(f"  ...–∏ –µ—â—ë {len(filtered_out)-10} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ.")

        print(f"{banner}\n")
        return formatted_results

    except Exception as e:
        print(f"[ERROR][DDGS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")
        return []

from bs4 import BeautifulSoup

def _fetch_page_content(url: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        html = requests.get(url, headers=headers, timeout=10).text
        soup = BeautifulSoup(html, "html.parser")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        text = ' '.join(p.get_text() for p in soup.find_all('p'))
        return text[:4000]  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")
        return ""


def _perform_web_search(user_id: int, query: str, assistant_key: str) -> str:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø–µ—á–∞—Ç–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–ø-3 —Å—Å—ã–ª–∫–∏,
    —Å—Ç–∞—Ç—É—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò.
    """
    banner = "-"*60
    print(f"\n{banner}\n[WEB SEARCH] user_id={user_id} assistant={assistant_key}")
    cleaned_query = re.sub(
        r'^(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–∫–∞–∫ –¥–µ–ª–∞|–Ω–∞–π–¥–∏|–Ω–∞–π–¥–∏ –º–Ω–µ)\s+',
        '', query, flags=re.IGNORECASE
    ).strip()
    search_query = f"{cleaned_query} lang:ru"
    print(f"[WEB SEARCH] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DDGS: \"{search_query}\"")
    search_results = _call_search_api(search_query)
    if not search_results:
        print("[WEB SEARCH] –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É.")
        return "üîç –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."

    # –ü—ã—Ç–∞–µ–º—Å—è fetch –¥–æ 3 —É—Å–ø–µ—à–Ω—ã—Ö, –∏–∑ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–¥–æ 10 attempts max –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
    page_texts = []
    successful_links = []
    max_success = 3
    max_attempts = 10  # –ª–∏–º–∏—Ç –Ω–∞ attempts
    for i, r in enumerate(search_results[:max_attempts], start=1):
        url = r['link']
        print(f"[FETCH] #{i} –ó–∞–≥—Ä—É–∂–∞–µ–º {url} ...")
        text = _fetch_page_content(url)
        if text:
            print(f"[FETCH] #{i} OK: –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤ (—É—Å–µ—á–µ–Ω–æ –¥–æ 4000 –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç)")
            page_texts.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {r['title']} ({r['link']})\n{text}\n")
            successful_links.append(r)
            if len(page_texts) >= max_success:
                break
        else:
            print(f"[FETCH] #{i} FAILED: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")

    if not page_texts:
        print("[WEB SEARCH] –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç–æ–ø–æ–≤—ã—Ö URL.")
        return "üîç –ù–∞—à–ª–∏—Å—å —Å—Å—ã–ª–∫–∏, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü."

    combined_context = "\n\n".join(page_texts)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –≤—ã–¥–µ—Ä–∂–∫—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ —É—Ç–µ—á–∫–∏ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞)
    sample = shorten(combined_context.replace("\n", " "), 400)
    print(f"      snip: {shorten(sample, 180)}\n")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    config = load_assistants_config()
    assistant_settings = config["assistants"].get(assistant_key, {})
    assistant_prompt = assistant_settings.get("prompt", "–í—ã –ø—Ä–æ—Å—Ç–æ –±–æ—Ç.")
    print(f"[WEB SEARCH] –ü—Ä–æ–º–ø—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω ({len(assistant_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")

    full_prompt = f"""{assistant_prompt}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:
"{query}"

–Ø –Ω–∞—à—ë–ª —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ:

{combined_context}

–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –¥–∞–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π, —Å–≤—è–∑–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.
–ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç ‚Äî —É–∫–∞–∂–∏ —ç—Ç–æ.
"""
    print("[WEB SEARCH] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI (–ø—Ä–æ–º–ø—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω).")
    try:
        chat_completion = openai.ChatCompletion.create(
            model="gpt-5-mini-2025-08-07",
            messages=[{"role": "system", "content": full_prompt}]
        )
        final_answer = chat_completion.choices[0].message.content
        print("[WEB SEARCH] –û—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω.")
    except Exception as e:
        print(f"[ERROR][OpenAI] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        final_answer = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

    sources_block = "\n\nüìö *–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*\n" + "\n".join(
        [f"üîó [{r['title']}]({r['link']})" for r in successful_links]
    )

    print(f"{banner}\n[WEB SEARCH] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è user_id={user_id}\n{banner}\n")
    return (final_answer, sources_block)




def needs_web_search(message: str) -> bool:
    keywords = ["–Ω–∞–π–¥–∏", "—á—Ç–æ —Å–µ–π—á–∞—Å", "–Ω–æ–≤–æ—Å—Ç–∏", "–ø–æ–∏—Å–∫", "–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–∞–∫—Ç—É–∞–ª—å–Ω–æ"]
    return any(kw in message.lower() for kw in keywords)

class ExceptionHandler:
    def handle(self, exception):
        if isinstance(exception, telebot.apihelper.ApiTelegramException):
            if exception.error_code == 403:
                try:
                    error_text = str(exception)
                    import re
                    match = re.search(r'chat_id=(\d+)', error_text)
                    if match:
                        user_id = match.group(1)
                        conn = connect_to_db()
                        cur = conn.cursor()
                        cur.execute("SELECT username FROM users WHERE user_id = %s", (user_id,))
                        result = cur.fetchone()
                        username = result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                        cur.close()
                        conn.close()
                        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. ID: {user_id}, Username: {username}")
                    else:
                        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID. –û—à–∏–±–∫–∞: {error_text}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    print(f"–ò—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞: {exception}")
                return True
        return False

bot.exception_handler = ExceptionHandler()

def create_command_logs_table():
    conn = connect_to_db()
    with conn.cursor() as cursor:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS command_logs (
                log_id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                command VARCHAR(255) NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        conn.commit()
    conn.close()

# ---------- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ ----------
ASSISTANT_COMMANDS = {
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π": "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π",
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ñ–∏–Ω—Ç–µ—Ö—É –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–º —Ñ–∏–Ω–∞–Ω—Å–∞–º": "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –§–∏–Ω—Ç–µ—Ö –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã",
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ª–∏—á–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–∞–º": "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã",
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º": "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–∏–∑–Ω–µ—Å—É –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É": "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –ë–∏–∑–Ω–µ—Å –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏": "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–∞–≤—ã–∫–∞–º –æ–±—â–µ–Ω–∏—è": "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –ù–∞–≤—ã–∫–∏ –æ–±—â–µ–Ω–∏—è",
    "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç": "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π",
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é": "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ",
}

def normalize_command(command: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ None (–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å).
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∞–Ω–≥–ª. –∏ —Ä—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, select_assistant_* –∏ –¥—Ä.
    """
    if not command or not isinstance(command, str):
        return None

    cmd = command.strip()

    # –ü—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥ (–∞–Ω–≥–ª/—Ä—É—Å/–≤–∞—Ä–∏–∞–Ω—Ç—ã)
    mapping = {
        "start": "start",
        "profile": "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
        "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å": "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
        "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å": "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
        "back_to_profile": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é",
        "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é",
        "–ù–∞–∑–∞–¥": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é",
        "statsadmin12": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)",
        "check_subscription": '‚úÖ –ù–∞–∂–∞—Ç–∏–µ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"',
        "pay": "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞",
        "subscription": "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞",
        "buy_subscription": "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        "cancel_subscription": "‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
        "cancel": "‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
        "open_subscription_menu": "üí≥ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏",
        "show_pay_menu": "üí≥ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏",
        "search_on": "üîç –í–∫–ª—é—á–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫",
        "search_off": "üîç –í—ã–∫–ª—é—á–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫",
        "search_denied_no_subscription": "üö´ –ü–æ–ø—ã—Ç–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏",
        "toggle_web_on": "üîç –í–∫–ª—é—á–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫",
        "toggle_web_off": "üîç –í—ã–∫–ª—é—á–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫",
        "support": "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        "show_support": "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞ (–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è)",
        "clear_history": "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞",
        "new": "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞",
        "language": "üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫",
        "assistants": "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã",
        "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã": "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã",
        "assistants_from_profile": "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã (–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è)",
        "show_assistants": "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã (–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è)",
        "experts": "üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç—ã",
        "–≠–∫—Å–ø–µ—Ä—Ç—ã": "üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç—ã",
        "experts_from_profile": "üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç—ã (–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è)",
        # "referral": "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
        "search": None,  # –∏–∑–±–µ–≥–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è "search" –∫–∞–∫ –º—É—Å–æ—Ä
        "universal": "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π"  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è /universal
    }

    # –ø—Ä–∏ –ø—Ä—è–º–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
    if cmd in mapping:
        return mapping[cmd]

    # lang_xx -> —è–∑—ã–∫ (–Ω–æ—Ä–º–∏—Ä—É–µ–º –≤ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç)
    if cmd.startswith("lang") or cmd.startswith("language_") or cmd.startswith("lang_"):
        return "üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫"

    # select_assistant_<id> –∏–ª–∏ select_assistant_<readable name>
    if cmd.startswith("select_assistant_") or cmd.startswith("selectassistant_"):
        aid = cmd.replace("select_assistant_", "").replace("selectassistant_", "")
        # –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            cfg = load_assistants_config()
            assistants = cfg.get("assistants", {}) if isinstance(cfg, dict) else {}
            if aid in assistants:
                return f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistants[aid].get('name')}"
            # –∏–Ω–æ–≥–¥–∞ id –º–æ–∂–µ—Ç –±—ã—Ç—å 'personal_finance' –∏–ª–∏ 'Fintech Consultant' ‚Äî –∏—â–µ–º –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é
            for k, v in assistants.items():
                if aid.lower() in k.lower() or aid.lower() in (v.get("name","").lower()):
                    return f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {v.get('name')}"
        except Exception:
            pass
        # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—Ç —Ç–µ–∫—Å—Ç, —á—Ç–æ –≤ callback (—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π)
        human = aid.replace("_", " ").strip()
        return f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {human.capitalize()}" if human else f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {aid}"

    # —Ñ–æ—Ä–º–∞—Ç assistant:xyz (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å)
    if cmd.startswith("assistant:"):
        aid = cmd.split(":", 1)[1]
        try:
            cfg = load_assistants_config()
            assistants = cfg.get("assistants", {}) if isinstance(cfg, dict) else {}
            if aid in assistants:
                return f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistants[aid].get('name')}"
        except Exception:
            pass
        return f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {aid}"

    # expert callbacks
    if cmd.startswith("expert_") or cmd.startswith("expert:"):
        # –¥–æ—Å—Ç–∞–µ–º id (—á–∏—Å–ª–æ) –µ—Å–ª–∏ –µ—Å—Ç—å
        parts = cmd.replace("expert:", "expert_").split("_")
        for p in parts:
            if p.isdigit():
                return f"üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç #{p}"
        return "üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç"

    # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ ‚Äî —É–∂–µ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–∞—è —Ä—É—Å—Å–∫–∞—è —Å—Ç—Ä–æ–∫–∞ (—Å —ç–º–æ–¥–∑–∏ –∏–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π) ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    if any(ch.isalpha() for ch in cmd) and len(cmd) <= 200:
        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        return " ".join(cmd.split())

    # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    return None

@bot.message_handler(commands=['universal'])
def set_universal_command(message):
    user_id = message.from_user.id
    assistant_id = 'universal_expert'
    set_user_assistant(user_id, assistant_id)

    # –°–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ
    clear_chat_history_for_user(user_id, message.chat.id)

    print(f"[INFO] –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {user_id} —á–µ—Ä–µ–∑ /universal —Å —Å–±—Ä–æ—Å–æ–º –∏—Å—Ç–æ—Ä–∏–∏")
    config = load_assistants_config()
    assistant_info = config["assistants"][assistant_id]
    name = assistant_info.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    description = ASSISTANT_DESCRIPTIONS.get(assistant_id, "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    text = (
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{name}</b>\n\n"
        f"üìå –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}"
    )
    bot.reply_to(message, text, parse_mode="HTML", reply_markup=create_main_menu())


# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ) ----------
def log_command(user_id: int, command: str):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø–∏—à–µ–º –≤ command_logs.
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º None (–º—É—Å–æ—Ä).
    """
    try:
        normalized = normalize_command(command)
        if not normalized:
            return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º—É—Å–æ—Ä –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã

        conn = connect_to_db()
        try:
            with conn.cursor() as cur:
                cur.execute(
                    "INSERT INTO command_logs (user_id, command) VALUES (%s, %s)",
                    (user_id, normalized)
                )
            conn.commit()
        finally:
            conn.close()
    except Exception as e:
        # –Ω–µ –¥–∞—ë–º –ø–∞–¥–∞—Ç—å –±–æ—Ç—É –∏–∑-–∑–∞ –ª–æ–≥–æ–≤
        print(f"[ERROR] log_command error: {e} (orig='{command}')")

def get_command_stats(period):
    conn = connect_to_db()
    with conn.cursor() as cursor:
        if period == 'week':
            cursor.execute("""
                SELECT command, COUNT(*) as count
                FROM command_logs
                WHERE timestamp >= CURRENT_DATE - INTERVAL '7 days'
                GROUP BY command
                ORDER BY count DESC;
            """)
        elif period == 'month':
            cursor.execute("""
                SELECT command, COUNT(*) as count
                FROM command_logs
                WHERE timestamp >= CURRENT_DATE - INTERVAL '30 days'
                GROUP BY command
                ORDER BY count DESC;
            """)
        elif period == 'year':
            cursor.execute("""
                SELECT command, COUNT(*) as count
                FROM command_logs
                WHERE timestamp >= CURRENT_DATE - INTERVAL '1 year'
                GROUP BY command
                ORDER BY count DESC;
            """)
        stats = cursor.fetchall()
    conn.close()
    return stats

def create_main_menu() -> types.ReplyKeyboardMarkup:
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        types.KeyboardButton("üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫"),
        types.KeyboardButton("ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã"),
        types.KeyboardButton("üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç—ã"),
        types.KeyboardButton("üîç –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–∏—Å–∫"),
        types.KeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"),
        types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏"),
        types.KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"),
        types.KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        # types.KeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"),
    )
    return keyboard

def setup_bot_commands():
    commands = [
        BotCommand("profile", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand("language", "üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫"),
        BotCommand("assistants", "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã"),
        BotCommand("experts", "üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç—ã"),
        BotCommand("search", "üîç –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫"),
        BotCommand("pay", "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"),
        BotCommand("cancel_subscription", "‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏"),
        BotCommand("new", "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"),
        BotCommand("support", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        # BotCommand("referral", "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"),
        BotCommand("universal", "ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"),
    ]
    try:
        bot.set_my_commands(commands)
        print("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥: {e}")

def create_price_menu(user_data) -> types.InlineKeyboardMarkup:
    buttons = []
    if not user_data.get('trial_used'):
        buttons.append([
            types.InlineKeyboardButton(
                text="–ü—Ä–æ–±–Ω–∞—è (3 –¥–Ω—è –∑–∞ 99‚ÇΩ)",
                callback_data="buy_trial"
            )
        ])
    buttons.append([
        types.InlineKeyboardButton(
            text="–ú–µ—Å—è—á–Ω–∞—è - 399‚ÇΩ",
            callback_data="buy_month"
        )
    ])
    buttons.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile"
        )
    ])
    return types.InlineKeyboardMarkup(keyboard=buttons)

def create_subscription_required_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(
        text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        callback_data="show_pay_menu"
    ))
    return keyboard

def create_profile_menu() -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton(text="ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã", callback_data="show_assistants"),
        types.InlineKeyboardButton(text="üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç—ã", callback_data="show_experts")
    )
    keyboard.add(
        types.InlineKeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="show_pay_menu"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∫–∞", callback_data="cancel_subscription")
    )
    keyboard.add(
        types.InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="show_support")
    )
    return keyboard

def create_assistants_menu() -> types.InlineKeyboardMarkup:
    config = load_assistants_config()
    assistants = config.get("assistants", {})
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if 'universal_expert' in assistants:
        assistant_info = assistants['universal_expert']
        keyboard.add(
            types.InlineKeyboardButton(
                text=assistant_info['name'],
                callback_data="select_assistant_universal_expert"
            )
        )
    
    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã
    for assistant_id, assistant_info in assistants.items():
        if assistant_id != 'universal_expert':  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ
            callback_data = f"select_assistant_{assistant_id}"
            keyboard.add(
                types.InlineKeyboardButton(
                    text=assistant_info['name'],
                    callback_data=callback_data
                )
            )
    
    keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
    )
    return keyboard

def create_experts_menu() -> types.InlineKeyboardMarkup:
    conn = connect_to_db()
    experts = get_all_experts(conn)
    conn.close()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for expert in experts:
        expert_id, name, specialization, *_ = expert
        keyboard.add(types.InlineKeyboardButton(
            text=f"{name} - {specialization}",
            callback_data=f"expert_{expert_id}"
        ))
    keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
    )
    return keyboard

load_assistants_config()

REQUIRED_CHANNEL_ID = "@GuidingStarVlog"
SUBSCRIPTION_CHECK_CACHE = {}

def check_user_subscription(user_id):
    try:
        if user_id in SUBSCRIPTION_CHECK_CACHE:
            last_check, is_subscribed = SUBSCRIPTION_CHECK_CACHE[user_id]
            if (datetime.datetime.now() - last_check).total_seconds() < 3600:
                return is_subscribed
        chat_member = bot.get_chat_member(chat_id=REQUIRED_CHANNEL_ID, user_id=user_id)
        status = chat_member.status
        is_subscribed = status in ['member', 'administrator', 'creator']
        SUBSCRIPTION_CHECK_CACHE[user_id] = (datetime.datetime.now(), is_subscribed)
        return is_subscribed
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        return True

def create_subscription_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/GuidingStarVlog")
    check_button = types.InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")
    keyboard.add(url_button)
    keyboard.add(check_button)
    return keyboard

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def subscription_check_callback(call):
    user_id = call.from_user.id
    log_command(user_id, "check_subscription")
    if user_id in SUBSCRIPTION_CHECK_CACHE:
        del SUBSCRIPTION_CHECK_CACHE[user_id]
    if check_user_subscription(user_id):
        set_user_assistant(user_id, 'universal_expert')
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º.",
            reply_markup=None  
        )
        bot.send_message(
            call.message.chat.id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!", 
            reply_markup=create_main_menu()
        )
        user_data = load_user_data(user_id)
        if 'pending_query' in user_data and user_data['pending_query']:
            pending_text = user_data['pending_query']
            del user_data['pending_query']
            save_user_data(user_data)
            class FakeMessage:
                def __init__(self, text, from_user, chat):
                    self.text = text
                    self.from_user = from_user
                    self.chat = chat
            fake_message = FakeMessage(pending_text, call.from_user, call.message.chat)
            message_queues[user_id].append(fake_message)
            process_user_queue(user_id, call.message.chat.id)
    else:
        bot.answer_callback_query(
            call.id,
            "–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.",
            show_alert=True
        )

@bot.callback_query_handler(func=lambda call: call.data == "show_pay_menu")
def show_pay_menu_callback(call):
    log_command(call.from_user.id, "show_pay_menu")
    subscription_text = """–ü–æ–¥–ø–∏—Å–∫–∞ Plus

–î–æ—Å—Ç—É–ø –∫ GPT 5 - –±–µ–∑–ª–∏–º–∏—Ç
–ß—Ç–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–æ–≤ - –±–µ–∑–ª–∏–º–∏—Ç
–ß—Ç–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ - –±–µ–∑–ª–∏–º–∏—Ç
–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–∏—Å–∫ - –±–µ–∑–ª–∏–º–∏—Ç
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏

‚ö†Ô∏è –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü: 399 —Ä—É–±–ª–µ–π
–ü–æ–∫—É–ø–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href="https://teletype.in/@st0ckholders_s/1X-lpJhx5rc">–æ—Ñ–µ—Ä—Ç–æ–π</a>
–û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - <a href="https://t.me/mon_tti1">t.me/mon_tti1</a>"""
    
    user_data = load_user_data(call.from_user.id)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=subscription_text,
        parse_mode="HTML",
        reply_markup=create_price_menu(user_data)
    )

from telebot.types import ReplyKeyboardRemove

@bot.message_handler(commands=['assistants'])
@bot.message_handler(func=lambda message: message.text == "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã")
def assistants_button_handler(message):
    log_command(message.from_user.id, "assistants")
    try:
        bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:",
            reply_markup=create_assistants_menu(),  # Inline-–∫–Ω–æ–ø–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
            disable_notification=True,  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            disable_web_page_preview=True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        )
        # –£–¥–∞–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —Å—Ä–∞–∑—É –µ–≥–æ —É–¥–∞–ª—è–µ–º
        msg = bot.send_message(
            chat_id=message.chat.id,
            text=".",
            reply_markup=ReplyKeyboardRemove(),  # –£–±–∏—Ä–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            disable_notification=True
        )
        bot.delete_message(
            chat_id=message.chat.id,
            message_id=msg.message_id
        )
    except telebot.apihelper.ApiTelegramException as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ assistants_button_handler: {e}")
        bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=create_main_menu()
        )
# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("select_assistant_"))
def assistant_callback_handler(call):
    try:
        # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π guard: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø call –∏ –µ–≥–æ –∫–ª—é—á–µ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        if not isinstance(call, types.CallbackQuery):
            print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø call –≤ assistant_callback_handler: {type(call)}")
            return  # –í—ã—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É
        
        if not hasattr(call, 'data') or not call.data:
            print(f"[ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data –≤ call")
            return
        
        if not hasattr(call, 'from_user'):
            print(f"[ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç from_user –≤ call")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ from_user ‚Äî —ç—Ç–æ User –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ int –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø
        if not isinstance(call.from_user, types.User):
            print(f"[ERROR] call.from_user –Ω–µ User: —Ç–∏–ø {type(call.from_user)}")
            if hasattr(call, 'id'):
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        if not hasattr(call.from_user, 'id'):
            print(f"[ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç id –≤ call.from_user")
            if hasattr(call, 'id'):
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        assistant_id = call.data.replace("select_assistant_", "")
        config = load_assistants_config()

        if assistant_id not in config["assistants"]:
            bot.answer_callback_query(call.id, "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user_id = call.from_user.id  # –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ

        # –õ–æ–≥–∏—Ä—É–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
        log_command(user_id, f"assistant:{assistant_id}")

        set_user_assistant(user_id, assistant_id)
        
        # –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if assistant_id == 'universal_expert':
            clear_chat_history_for_user(call.from_user.id, getattr(call.message, "chat", {}).id if call.message else None)
            print(f"[INFO] –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {user_id} —Å —Å–±—Ä–æ—Å–æ–º –∏—Å—Ç–æ—Ä–∏–∏")
        
        assistant_info = config["assistants"][assistant_id]
        name = assistant_info.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        description = ASSISTANT_DESCRIPTIONS.get(assistant_id, "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

        text = (
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{name}</b>\n\n"
            f"üìå –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}"
        )

        # Guard –¥–ª—è call.message –ø–µ—Ä–µ–¥ edit
        if not hasattr(call, 'message') or not call.message:
            print(f"[ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç message –≤ call")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        
        if not hasattr(call.message, 'chat') or not hasattr(call.message, 'message_id'):
            print(f"[ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç chat/message_id –≤ call.message")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode="HTML",
            reply_markup=None
        )
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π answer_callback_query –≤ –∫–æ–Ω—Ü–µ
        bot.answer_callback_query(call.id, f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {name} –≤—ã–±—Ä–∞–Ω")
        
    except Exception as e:
        print(f"[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ assistant_callback_handler: {e}, call —Ç–∏–ø: {type(call)}, from_user —Ç–∏–ø: {type(getattr(call, 'from_user', None))}")
        try:
            if hasattr(call, 'id') and call.id:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä.")
        except Exception as answer_e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ answer_callback_query: {answer_e}")

@bot.message_handler(commands=['experts'])
@bot.message_handler(func=lambda message: message.text == "üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç—ã")
def experts_button_handler(message):
    log_command(message.from_user.id, "experts")
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–∞:",
        reply_markup=create_experts_menu()
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("expert_"))
def expert_callback_handler(call):
    print(f"[DEBUG] Expert callback data: {call.data}")
    try:
        expert_id = int(call.data.split("_")[1])

        # –õ–æ–≥–∏—Ä—É–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞
        log_command(call.from_user.id, f"expert:{expert_id}")

        conn = connect_to_db()
        expert = get_expert_by_id(conn, expert_id)
        conn.close()

        if not expert:
            bot.answer_callback_query(call.id, "–≠–∫—Å–ø–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        expert_id, name, specialization, description, photo_url, telegram_username, contact_info, is_available = expert

        # üîπ –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞
        keyboard = types.InlineKeyboardMarkup()
        if telegram_username:
            keyboard.add(types.InlineKeyboardButton(
                text="–ù–∞–ø–∏—Å–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç—É",
                url=f"https://t.me/{telegram_username.replace('@', '')}"
            ))

        # üîπ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é
        keyboard.add(
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
        )

        message_text = f"<b>{name}</b>\n<i>{specialization}</i>\n\n{description}\n\n"
        if contact_info:
            message_text += f"<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n{contact_info}"

        # üîπ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if photo_url:
            try:
                bot.edit_message_media(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    media=types.InputMediaPhoto(
                        media=photo_url,
                        caption=message_text,
                        parse_mode="HTML"
                    ),
                    reply_markup=keyboard
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ —ç–∫—Å–ø–µ—Ä—Ç–∞: {e}")
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=message_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
        else:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=message_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )

        bot.answer_callback_query(call.id)

    except ValueError:
        print(f"[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç expert_id –≤ callback: {call.data}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–∫—Å–ø–µ—Ä—Ç–∞")


@bot.message_handler(commands=['universal'])
@bot.message_handler(func=lambda message: message.text == "üåç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
def universal_assistant_handler(message):
    try:
        # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π guard: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø message –∏ –µ–≥–æ –∫–ª—é—á–µ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        if not isinstance(message, types.Message):
            print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø message –≤ universal_assistant_handler: {type(message)}")
            return  # –í—ã—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É
        
        if not hasattr(message, 'from_user'):
            print(f"[ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç from_user –≤ message")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ from_user ‚Äî —ç—Ç–æ User –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ int –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø
        if not isinstance(message.from_user, types.User):
            print(f"[ERROR] message.from_user –Ω–µ User: —Ç–∏–ø {type(message.from_user)}")
            return
        
        if not hasattr(message.from_user, 'id'):
            print(f"[ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç id –≤ message.from_user")
            return
        
        if not hasattr(message, 'chat'):
            print(f"[ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat –≤ message")
            return
        
        user_id = message.from_user.id  # –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ
        assistant_id = 'universal_expert'
        
        # –õ–æ–≥–∏—Ä—É–µ–º (–µ—Å–ª–∏ log_command –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        log_command(user_id, "universal")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é (–ë–î + Redis)
        set_user_assistant(user_id, assistant_id)
        
        # –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ
        clear_chat_history_for_user(user_id, message.chat.id)

        print(f"[INFO] –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {user_id} —á–µ—Ä–µ–∑ /universal —Å —Å–±—Ä–æ—Å–æ–º –∏—Å—Ç–æ—Ä–∏–∏")
        
        config = load_assistants_config()
        assistant_info = config["assistants"].get(assistant_id, {})
        name = assistant_info.get("name", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç")
        description = ASSISTANT_DESCRIPTIONS.get(assistant_id, "–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.")
        
        text = (
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{name}</b>\n\n"
            f"üìå –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}"
        )
        
        bot.reply_to(message, text, parse_mode="HTML", reply_markup=create_main_menu())
        
    except Exception as e:
        print(f"[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ universal_assistant_handler: {e}, message —Ç–∏–ø: {type(message)}, from_user —Ç–∏–ø: {type(getattr(message, 'from_user', None))}")
        try:
            bot.reply_to(message, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_main_menu())
        except Exception as reply_e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ reply_to: {reply_e}")

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def back_button_handler(message):
    log_command(message.from_user.id, "–ù–∞–∑–∞–¥")
    bot.send_message(
        message.chat.id,
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=create_main_menu()
    )

@bot.message_handler(func=lambda message: message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
def profile_button_handler(message):
    log_command(message.from_user.id, "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    show_profile(message)

@bot.message_handler(commands=["pay"])
@bot.message_handler(func=lambda message: message.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
def get_pay(message):
    log_command(message.from_user.id, "pay")
    subscription_text = """–ü–æ–¥–ø–∏—Å–∫–∞ Plus

–î–æ—Å—Ç—É–ø –∫ GPT 5 - –±–µ–∑–ª–∏–º–∏—Ç
–ß—Ç–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–æ–≤ - –±–µ–∑–ª–∏–º–∏—Ç
–ß—Ç–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ - –±–µ–∑–ª–∏–º–∏—Ç
–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–∏—Å–∫ - –±–µ–∑–ª–∏–º–∏—Ç
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏

‚ö†Ô∏è –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü: 399 —Ä—É–±–ª–µ–π
–ü–æ–∫—É–ø–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href="https://teletype.in/@st0ckholders_s/1X-lpJhx5rc">–æ—Ñ–µ—Ä—Ç–æ–π</a>
–û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - <a href="https://t.me/mon_tti1">t.me/mon_tti1</a>"""
    
    user_data = load_user_data(message.from_user.id)
    bot.send_message(
        message.chat.id,
        subscription_text,
        parse_mode="HTML",
        reply_markup=create_price_menu(user_data)
    )

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
import threading

def monitor_payment(user_id: int, payment_id: str, max_checks: int = 4, interval: int = 180):
    def run():
        for attempt in range(max_checks):
            try:
                payment = Payment.find_one(payment_id)
                print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è {user_id}: status={payment.status}")

                if payment.status == "succeeded":
                    save_payment_method_for_user(user_id, payment.payment_method.id)
                    set_user_subscription(user_id, "plus_trial")

                    # üîπ –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ç—Ä–∏–∞–ª —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                    user_data = load_user_data(user_id)
                    if user_data:
                        user_data['trial_used'] = True
                        save_user_data(user_data)

                    bot.send_message(
                        user_id,
                        "‚úÖ –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 3 –¥–Ω—è!",
                        reply_markup=create_main_menu()
                    )
                    return
                elif payment.status in ["canceled", "failed"]:
                    bot.send_message(
                        user_id,
                        "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /pay",
                        reply_markup=create_main_menu()
                    )
                    return
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è {user_id}: {e}")

            time.sleep(interval)

        bot.send_message(
            user_id,
            "‚ö†Ô∏è –ú—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 12 –º–∏–Ω—É—Ç. "
            "–ï—Å–ª–∏ –¥–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–ª–∏—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: https://t.me/mon_tti1",
            reply_markup=create_main_menu()
        )

    threading.Thread(target=run, daemon=True).start()



@bot.callback_query_handler(func=lambda callback: callback.data in ["buy_trial", "buy_month"])
def buy_subscription(callback):
    user_id = callback.from_user.id
    user_data = load_user_data(user_id)
    if not user_data:
        print(f"[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        bot.send_message(callback.message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=create_main_menu())
        bot.answer_callback_query(callback.id)
        return
    try:
        if callback.data == "buy_trial":
            if user_data['trial_used']:
                print(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É")
                bot.send_message(callback.message.chat.id, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=create_main_menu())
                bot.answer_callback_query(callback.id)
                return
            price = "99.00"
            payment_params = {
                "amount": {"value": price, "currency": "RUB"},
                "capture": True,
                "confirmation": {
                    "type": "redirect",
                    "return_url": "https://t.me/fiinny_bot"
                },
                "save_payment_method": True,
                "description": f"–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus –¥–ª—è {user_id}",
                "receipt": {
                    "customer": {"email": "sg050@yandex.ru"},
                    "items": [{
                        "description": "–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus (3 –¥–Ω—è)",
                        "quantity": "1.00",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É
                        "amount": {"value": price, "currency": "RUB"},
                        "vat_code": 1
                    }]
                },
                "idempotency_key": str(uuid.uuid4())
            }
            print(f"[DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id={user_id}: {payment_params}")
            payment = Payment.create(payment_params)
            print(f"[DEBUG] –ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω: id={payment.id}, status={payment.status}, confirmation_url={payment.confirmation.confirmation_url}")
            save_payment_id_for_user(user_id, payment.id)

            # üîπ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            monitor_payment(user_id, payment.id)

            bot.send_message(
                callback.message.chat.id,
                f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payment.confirmation.confirmation_url}",
                reply_markup=types.InlineKeyboardMarkup([[
                    types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="cancel_subscription")
                ]])
            )
        elif callback.data == "buy_month":
            print(f"[DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: user_id={user_id}")
            bot.send_invoice(
                chat_id=callback.message.chat.id,
                title="–ü–æ–¥–ø–∏—Å–∫–∞ Plus (–º–µ—Å—è—Ü)",
                description="–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ GPT-5, –≤–µ–±-–ø–æ–∏—Å–∫, –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.",
                invoice_payload=f"month_subscription_{user_id}",
                provider_token=pay_token,
                currency="RUB",
                prices=[types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ Plus (–º–µ—Å—è—Ü)", amount=39900)],
                start_parameter=f"month_{user_id}",
            )
        bot.answer_callback_query(callback.id)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id={user_id}: {e}")
        bot.send_message(
            callback.message.chat.id,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: https://t.me/mon_tti1",
            reply_markup=create_main_menu()
        )
        bot.answer_callback_query(callback.id)

@bot.pre_checkout_query_handler(func=lambda query: True)
def pre_checkout_query_handler(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def successful_payment_handler(message):
    user_id = message.from_user.id
    payload = message.successful_payment.invoice_payload
    if payload.startswith("month_subscription_"):
        set_user_subscription(user_id, "plus_month")
        bot.send_message(
            message.chat.id,
            "‚úÖ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!",
            reply_markup=create_main_menu()
        )
    else:
        bot.send_message(
            message.chat.id,
            "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞.",
            reply_markup=create_main_menu()
        )

def check_pending_payments():
    conn = connect_to_db()
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT user_id, payment_id FROM payments WHERE status = 'pending'")
            payments = cursor.fetchall()
            print(f"[INFO] –ù–∞–π–¥–µ–Ω–æ {len(payments)} pending –ø–ª–∞—Ç–µ–∂–µ–π")
            for user_id, payment_id in payments:
                try:
                    payment = Payment.find_one(payment_id)
                    print(f"[INFO] –ü–ª–∞—Ç—ë–∂ {payment_id} –¥–ª—è user_id={user_id}: status={payment.status}")
                    if payment.status == "succeeded":
                        save_payment_method_for_user(user_id, payment.payment_method.id)
                        set_user_subscription(user_id, "plus_trial")
                        bot.send_message(
                            user_id,
                            "‚úÖ –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 3 –¥–Ω—è!",
                            reply_markup=create_main_menu()
                        )
                        cursor.execute("UPDATE payments SET status = 'succeeded' WHERE payment_id = %s", (payment_id,))
                    elif payment.status in ["canceled", "failed"]:
                        cursor.execute("UPDATE payments SET status = %s WHERE payment_id = %s", (payment.status, payment_id))
                except Exception as e:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è user_id={user_id}: {e}")
            conn.commit()
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
    finally:
        conn.close()

def check_auto_renewal():
    conn = connect_to_db()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT user_id FROM users 
                WHERE subscription_plan = 'plus_trial' 
                AND subscription_end_date <= %s
                AND auto_renewal = TRUE
            """, (datetime.datetime.now().date(),))
            users = cursor.fetchall()
            print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è")
            for user in users:
                user_id = user[0]
                method_id = get_payment_method_for_user(user_id)
                if method_id:
                    try:
                        payment_params = {
                            "amount": {"value": "399.00", "currency": "RUB"},
                            "capture": True,
                            "payment_method_id": method_id,
                            "description": f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}",
                            "receipt": {
                                "customer": {"email": "sg050@yandex.ru"},
                                "items": [{
                                    "description": "–ü–æ–¥–ø–∏—Å–∫–∞ Plus (–º–µ—Å—è—Ü)",
                                    "quantity": "1.00",
                                    "amount": {"value": "399.00", "currency": "RUB"},
                                    "vat_code": 1
                                }]
                            },
                            "idempotency_key": str(uuid.uuid4())
                        }
                        print(f"[DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–ª—è user_id={user_id}: {payment_params}")
                        payment = Payment.create(payment_params)
                        print(f"[DEBUG] –ü–ª–∞—Ç—ë–∂ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: id={payment.id}, status={payment.status}")

                        if payment.status == "succeeded":
                            set_user_subscription(user_id, "plus_month")
                            bot.send_message(
                                user_id,
                                "‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 399‚ÇΩ!",
                                reply_markup=create_main_menu()
                            )
                        else:
                            reason = None
                            if hasattr(payment, "cancellation_details") and payment.cancellation_details:
                                reason = getattr(payment.cancellation_details, "reason", None)

                            msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n–°—Ç–∞—Ç—É—Å: {payment.status}"
                            if reason:
                                msg += f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                            msg += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: /pay"

                            # üîπ –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            bot.send_message(user_id, msg, reply_markup=create_main_menu())

                            # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                            try:
                                bot.send_message(
                                    741831495,
                                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–ª—è user_id={user_id}\n"
                                    f"–°—Ç–∞—Ç—É—Å: {payment.status}\n"
                                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
                                )
                            except Exception as e:
                                print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")

                            # üîπ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ free
                            set_user_subscription(user_id, "free")

                    except Exception as e:
                        print(f"[ERROR] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–ª—è user_id={user_id}: {e}")
                        bot.send_message(
                            user_id,
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: /pay",
                            reply_markup=create_main_menu()
                        )
                        try:
                            bot.send_message(
                                741831495,
                                f"‚ùå Exception –ø—Ä–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏ user_id={user_id}\n–û—à–∏–±–∫–∞: {e}"
                            )
                        except:
                            pass
                else:
                    print(f"[INFO] –ù–µ –Ω–∞–π–¥–µ–Ω payment_method_id –¥–ª—è user_id={user_id}")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è: {e}")
    finally:
        conn.close()


schedule.every(5).minutes.do(check_pending_payments)
schedule.every().day.at("00:00").do(check_auto_renewal)

from telebot.types import ReplyKeyboardRemove

@bot.callback_query_handler(func=lambda call: call.data in ["show_assistants", "show_experts", "show_support", "cancel_subscription", "back_to_profile"])
def profile_menu_callback_handler(call):
    log_command(call.from_user.id, call.data)
    user_id = call.from_user.id
    user_data = load_user_data(user_id)
    if not user_data:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å /start.",
            reply_markup=create_main_menu()
        )
        bot.answer_callback_query(call.id)
        return

    if call.data == "show_assistants":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:",
            reply_markup=create_assistants_menu()
        )

    elif call.data == "show_experts":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–∞:",
            reply_markup=create_experts_menu()
        )

    elif call.data == "show_support":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: <a href='https://t.me/mon_tti1'>t.me/mon_tti1</a>",
            parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
            )
        )

    elif call.data == "cancel_subscription":
        if not user_data or user_data['subscription_plan'] == 'free':
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
                )
            )
        else:
            conn = connect_to_db()
            cur = conn.cursor()
            cur.execute("""
                UPDATE users 
                SET auto_renewal = FALSE
                WHERE user_id = %s
            """, (user_id,))
            conn.commit()
            cur.close()
            conn.close()
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
                )
            )

    elif call.data == "back_to_profile":
        subscription_end_date = user_data.get('subscription_end_date')
        remaining_days = None
        if user_data['subscription_plan'] != 'free' and subscription_end_date:
            today = datetime.datetime.now().date()
            remaining_days = (subscription_end_date - today).days
            if remaining_days < 0:
                remaining_days = 0

        # üîπ –í–µ–±-–ø–æ–∏—Å–∫
        web_search_status = "–≤–∫–ª—é—á—ë–Ω" if user_data['web_search_enabled'] else \
            "–≤—ã–∫–ª—é—á–µ–Ω" if user_data['subscription_plan'].startswith('plus_') else \
            "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus)"

        # üîπ –ö–≤–æ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
        if user_data['subscription_plan'] in ['plus_trial', 'plus_month']:
            quota_text = "GPT-5: –±–µ–∑–ª–∏–º–∏—Ç ‚úÖ"
        else:
            quota_text = f"GPT-5: {user_data['daily_tokens']} —Å–∏–º–≤–æ–ª–æ–≤"

        profile_text = f"""
ID: {user_id}

–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: {PLAN_NAMES.get(user_data['subscription_plan'], user_data['subscription_plan'])}
"""
        if user_data['subscription_plan'] != 'free' and remaining_days is not None:
            profile_text += f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â—ë {remaining_days} –¥–Ω–µ–π\n"

        profile_text += f"""
–í–µ–±-–ø–æ–∏—Å–∫: {web_search_status}

–û—Å—Ç–∞–≤—à–∞—è—Å—è –∫–≤–æ—Ç–∞:
{quota_text}

üè∑ –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:
üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${user_data['total_spent']:.4f}
"""

        try:
            # ü©µ –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ñ–æ—Ç–æ ‚Äî Telegram –Ω–µ –¥–∞—Å—Ç –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            if call.message.content_type == "photo":
                bot.send_message(
                    chat_id=call.message.chat.id,
                    text=profile_text,
                    reply_markup=create_profile_menu()
                )
            else:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=profile_text,
                    reply_markup=create_profile_menu()
                )
        except telebot.apihelper.ApiTelegramException as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ back_to_profile: {e}")
            bot.send_message(
                chat_id=call.message.chat.id,
                text=profile_text,
                reply_markup=create_profile_menu()
            )


    bot.answer_callback_query(call.id)
# helper ‚Äî –¥–µ–ª–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –ø–æ user_id
def clear_chat_history_for_user(user_id: int, chat_id: int | None = None):
    try:
        conn = connect_to_db()
        cur = conn.cursor()
        cur.execute("DELETE FROM chat_history WHERE chat_id = %s", (user_id,))
        conn.commit()
        cur.close()
        conn.close()
        # —Å—Ç–∞–≤–∏–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        set_user_assistant(user_id, 'universal_expert')
        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç (–µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å chat_id)
        if chat_id:
            try:
                bot.send_message(chat_id, "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.", reply_markup=create_main_menu())
            except Exception as e:
                print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ –¥–ª—è {user_id}: {e}")
    except Exception as e:
        print(f"[ERROR] clear_chat_history_for_user({user_id}) failed: {e}")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç helper
@bot.message_handler(commands=['new'])
@bot.message_handler(func=lambda message: message.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞")
def clear_chat_history_handler(message):
    log_command(message.from_user.id, "new")
    clear_chat_history_for_user(message.from_user.id, message.chat.id)

def create_language_menu():
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    languages = [
        ("–†–æ—Å—Å–∏—è", "ru", "üá∑üá∫"),
        ("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "en", "üá¨üáß"),
        ("–§—Ä–∞–Ω—Ü–∏—è", "fr", "üá´üá∑"),
        ("–ì–µ—Ä–º–∞–Ω–∏—è", "de", "üá©üá™"),
        ("–¢—É—Ä—Ü–∏—è", "tr", "üáπüá∑"),
        ("–ë—Ä–∞–∑–∏–ª–∏—è", "pt", "üáßüá∑"),
        ("–ú–µ–∫—Å–∏–∫–∞", "es", "üá≤üáΩ"),
        ("–ò—Ç–∞–ª–∏—è", "it", "üáÆüáπ"),
        ("–ò–Ω–¥–∏—è", "hi", "üáÆüá≥"),
        ("–ö–∏—Ç–∞–π", "zh", "üá®üá≥"),
    ]
    for lang_name, lang_code, emoji in languages:
        keyboard.add(types.InlineKeyboardButton(
            text=f"{emoji} {lang_name}",
            callback_data=f"lang_{lang_code}"
        ))
    keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
    )
    return keyboard

@bot.message_handler(commands=['language'])
@bot.message_handler(func=lambda message: message.text == "üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫")
def language_handler(message):
    log_command(message.from_user.id, "language")
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        reply_markup=create_language_menu()
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def language_callback_handler(call):
    lang_code = call.data.split("_")[-1]
    log_command(call.from_user.id, f"lang_{lang_code}")
    user_data = load_user_data(call.from_user.id)
    if user_data:
        user_data['language'] = lang_code
        save_user_data(user_data)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {lang_code.upper()}",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
            )
        )
    else:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
            )
        )
    bot.answer_callback_query(call.id)

@bot.message_handler(commands=['search'])
@bot.message_handler(func=lambda message: message.text == "üîç –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–∏—Å–∫")
def search_handler(message):
    user_id = message.from_user.id
    user_data = load_user_data(user_id)
    if not user_data:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å /start.", reply_markup=create_main_menu())
        return
    if user_data['subscription_plan'] == 'free':
        bot.reply_to(
            message,
            "üåê –í–µ–±-–ø–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π Plus.\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!",
            reply_markup=create_subscription_required_keyboard()
        )
        log_command(user_id, "search_denied_no_subscription")
        return
    new_state = not user_data['web_search_enabled']
    user_data['web_search_enabled'] = new_state
    save_user_data(user_data)
    log_command(user_id, f"search_{'on' if new_state else 'off'}")
    status_text = "–≤–∫–ª—é—á—ë–Ω" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω"
    bot.reply_to(message, f"–í–µ–±-–ø–æ–∏—Å–∫ {status_text}.", reply_markup=create_main_menu())

@bot.message_handler(commands=['support'])
@bot.message_handler(func=lambda message: message.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
def support_handler(message):
    log_command(message.from_user.id, "support")
    bot.reply_to(message, "–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - <a href='https://t.me/mon_tti1'>t.me/mon_tti1</a>", parse_mode="HTML", reply_markup=create_main_menu())

@bot.message_handler(commands=['cancel_subscription'])
@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
def cancel_subscription_handler(message):
    user_id = message.from_user.id
    user_data = load_user_data(user_id)
    if not user_data or user_data['subscription_plan'] == 'free':
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=create_main_menu())
        return
    conn = connect_to_db()
    cur = conn.cursor()
    cur.execute("""
        UPDATE users 
        SET auto_renewal = FALSE
        WHERE user_id = %s
    """, (user_id,))
    conn.commit()
    cur.close()
    conn.close()
    bot.reply_to(message, "–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π.", reply_markup=create_main_menu())

def check_and_update_tokens(user_id):
    conn = connect_to_db()
    cur = conn.cursor()
    cur.execute(""" 
        SELECT daily_tokens, subscription_plan, last_token_update, subscription_end_date 
        FROM users WHERE user_id = %s 
    """, (user_id,))
    user_data = cur.fetchone()
    if not user_data:
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        cur.close()
        conn.close()
        return

    tokens, current_plan, last_update, subscription_end_date = user_data
    current_date = datetime.datetime.now().date()

    # üîπ –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å ‚Üí –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ free
    if current_plan != 'free' and subscription_end_date and current_date > subscription_end_date:
        print(f"[DEBUG] –ü–æ–¥–ø–∏—Å–∫–∞ user_id={user_id} –∏—Å—Ç–µ–∫–ª–∞, –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ free")
        cur.execute(""" 
            UPDATE users 
            SET subscription_plan = 'free', 
                daily_tokens = %s,
                subscription_end_date = NULL,
                web_search_enabled = FALSE
            WHERE user_id = %s 
        """, (FREE_DAILY_TOKENS, user_id))
        bot.send_message(
            user_id,
            "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –í–µ–±-–ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á—ë–Ω. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: /pay",
            reply_markup=create_main_menu()
        )

    # üîπ –ï—Å–ª–∏ —Ç–∞—Ä–∏—Ñ free ‚Üí –Ω–∞—á–∏—Å–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã —Ä–∞–∑ –≤ –¥–µ–Ω—å
    if current_plan == 'free':
        if isinstance(last_update, str):
            last_update_date = datetime.datetime.strptime(last_update, '%Y-%m-%d').date()
        else:
            last_update_date = last_update

        if current_date > last_update_date:
            print(f"[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è user_id={user_id}: {FREE_DAILY_TOKENS}")
            cur.execute(""" 
                UPDATE users 
                SET daily_tokens = %s, 
                    last_token_update = %s 
                WHERE user_id = %s 
            """, (FREE_DAILY_TOKENS, current_date, user_id))

    # üîπ –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ —Ç–æ–∫–µ–Ω—ã –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º (—Å—Ç–∞–≤–∏–º "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å")
    elif current_plan in ['plus_trial', 'plus_month']:
        cur.execute("""
            UPDATE users 
            SET daily_tokens = 999999999  -- —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ–º "–±–µ–∑–ª–∏–º–∏—Ç"
            WHERE user_id = %s
        """, (user_id,))

    conn.commit()
    cur.close()
    conn.close()

@bot.message_handler(commands=['profile'])
@bot.message_handler(func=lambda message: message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
def show_profile(message):
    log_command(message.from_user.id, "profile")
    user_id = message.from_user.id
    user_data = load_user_data(user_id)
    if not user_data:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å /start.", reply_markup=create_main_menu())
        return

    subscription_end_date = user_data.get('subscription_end_date')
    remaining_days = None
    if user_data['subscription_plan'] != 'free' and subscription_end_date:
        today = datetime.datetime.now().date()
        remaining_days = (subscription_end_date - today).days
        if remaining_days < 0:
            remaining_days = 0

    # üîπ –í–µ–±-–ø–æ–∏—Å–∫
    web_search_status = "–≤–∫–ª—é—á—ë–Ω" if user_data['web_search_enabled'] else \
        "–≤—ã–∫–ª—é—á–µ–Ω" if user_data['subscription_plan'].startswith('plus_') else \
        "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus)"

    # üîπ –ö–≤–æ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
    if user_data['subscription_plan'] in ['plus_trial', 'plus_month']:
        quota_text = "GPT-5: –±–µ–∑–ª–∏–º–∏—Ç ‚úÖ"
    else:
        quota_text = f"GPT-5: {user_data['daily_tokens']} —Å–∏–º–≤–æ–ª–æ–≤"

    profile_text = f"""
ID: {user_id}

–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: {PLAN_NAMES.get(user_data['subscription_plan'], user_data['subscription_plan'])}
"""
    if user_data['subscription_plan'] != 'free' and remaining_days is not None:
        profile_text += f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â—ë {remaining_days} –¥–Ω–µ–π\n"

    profile_text += f"""
–í–µ–±-–ø–æ–∏—Å–∫: {web_search_status}

–û—Å—Ç–∞–≤—à–∞—è—Å—è –∫–≤–æ—Ç–∞:
{quota_text}

üè∑ –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:
üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${user_data['total_spent']:.4f}

"""
    bot.send_message(message.chat.id, profile_text, reply_markup=create_profile_menu())


ADMIN_IDS = [998107476, 741831495]


# ---------- –ö–≠–® –î–õ–Ø ASSISTANTS (—á—Ç–æ–±—ã –Ω–µ –¥–µ—Ä–≥–∞—Ç—å Redis/–ë–î –Ω–∞ –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤) ----------
_ASSISTANTS_CACHE = {"ts": 0, "data": {"assistants": {}}}
_ASSISTANTS_TTL = 30  # —Å–µ–∫—É–Ω–¥—ã –∫—ç—à–∞

def get_assistants_cached():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤, –∫—ç—à–∏—Ä—É—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ _ASSISTANTS_TTL —Å–µ–∫—É–Ω–¥."""
    try:
        import time as _time
        now = int(_time.time())
        if now - _ASSISTANTS_CACHE["ts"] < _ASSISTANTS_TTL and _ASSISTANTS_CACHE["data"]:
            return _ASSISTANTS_CACHE["data"]
        cfg = load_assistants_config()
        if isinstance(cfg, dict):
            _ASSISTANTS_CACHE["data"] = cfg
            _ASSISTANTS_CACHE["ts"] = now
            return cfg
    except Exception as e:
        print(f"[WARN] get_assistants_cached error: {e}")
    return {"assistants": {}}


# ---------- –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤) ----------
@bot.message_handler(commands=['statsadmin12'])
def show_stats_admin(message):
    # –ø—Ä–∞–≤–∞
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=create_main_menu())
        return

    # –ª–æ–≥–∏—Ä—É–µ–º —Å–∞–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∞ (–æ–Ω –±—É–¥–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω —Ñ—É–Ω–∫—Ü–∏–µ–π log_command)
    log_command(message.from_user.id, "statsadmin12")

    # –ø–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î (—Å–ø–∏—Å–∫–∏ –∫–æ—Ä—Ç–µ–∂–µ–π (command, count))
    try:
        week_raw = get_command_stats('week')
        month_raw = get_command_stats('month')
        year_raw = get_command_stats('year')
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=create_main_menu())
        return

    # –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º normalize_command, –Ω–æ normalize_command —á–∏—Ç–∞–µ—Ç –∫—ç—à)
    def aggregate(raw):
        agg = {}
        for cmd, cnt in raw:
            norm = normalize_command(cmd)
            if not norm:
                continue
            agg[norm] = agg.get(norm, 0) + int(cnt)
        return agg

    week = aggregate(week_raw)
    month = aggregate(month_raw)
    year = aggregate(year_raw)

    # –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    def group_stats(agg):
        groups = {
            "–ü—Ä–æ—Ñ–∏–ª—å": {},
            "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã": {},
            "–ü–æ–¥–ø–∏—Å–∫–∏": {},
            "–í–µ–±-–ø–æ–∏—Å–∫": {},
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞": {},
            "–≠–∫—Å–ø–µ—Ä—Ç—ã": {},
            "–ü–ª–∞—Ç–µ–∂–∏/–ø—Ä–æ—á–µ–µ": {},
            "–ê–¥–º–∏–Ω/—Å–∏—Å—Ç–µ–º–Ω–æ–µ": {},
            "–î—Ä—É–≥–æ–µ": {}
        }
        for cmd, cnt in agg.items():
            if "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" in cmd or "–ù–∞–∑–∞–¥" in cmd:
                groups["–ü—Ä–æ—Ñ–∏–ª—å"][cmd] = cnt
            elif cmd.startswith("ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç") or "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã" in cmd:
                groups["–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã"][cmd] = cnt
            elif "–ü–æ–¥–ø–∏—Å–∫" in cmd or "–ö—É–ø–∏—Ç—å" in cmd or "–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏" in cmd:
                groups["–ü–æ–¥–ø–∏—Å–∫–∏"][cmd] = cnt
            elif "–≤–µ–±-–ø–æ–∏—Å–∫" in cmd or "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–∏—Å–∫" in cmd or "–í–∫–ª—é—á–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫" in cmd or "–í—ã–∫–ª—é—á–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫" in cmd or "–ü–æ–ø—ã—Ç–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞" in cmd:
                groups["–í–µ–±-–ø–æ–∏—Å–∫"][cmd] = cnt
            elif "–ü–æ–¥–¥–µ—Ä–∂–∫" in cmd:
                groups["–ü–æ–¥–¥–µ—Ä–∂–∫–∞"][cmd] = cnt
            elif "–≠–∫—Å–ø–µ—Ä—Ç" in cmd:
                groups["–≠–∫—Å–ø–µ—Ä—Ç—ã"][cmd] = cnt
            # elif cmd in ("start", "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", "referral"):
                groups["–ü–ª–∞—Ç–µ–∂–∏/–ø—Ä–æ—á–µ–µ"][cmd] = cnt
            elif "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in cmd or cmd == "statsadmin12" or cmd.startswith("üìä"):
                groups["–ê–¥–º–∏–Ω/—Å–∏—Å—Ç–µ–º–Ω–æ–µ"][cmd] = cnt
            else:
                groups["–î—Ä—É–≥–æ–µ"][cmd] = cnt
        return groups

    wk_g = group_stats(week)
    mo_g = group_stats(month)
    yr_g = group_stats(year)

    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    def format_group(title, d):
        if not d:
            return ""
        lines = sorted(d.items(), key=lambda x: -x[1])
        s = f"<b>{title}</b>\n"
        for name, cnt in lines:
            s += f"‚Ä¢ {name}: {cnt} —Ä–∞–∑\n"
        s += "\n"
        return s

    def format_report(period_title, groups_dict):
        header = f"<b>{period_title}</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        order = ["–ü—Ä–æ—Ñ–∏–ª—å", "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã", "–ü–æ–¥–ø–∏—Å–∫–∏", "–í–µ–±-–ø–æ–∏—Å–∫", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–≠–∫—Å–ø–µ—Ä—Ç—ã", "–ü–ª–∞—Ç–µ–∂–∏/–ø—Ä–æ—á–µ–µ", "–ê–¥–º–∏–Ω/—Å–∏—Å—Ç–µ–º–Ω–æ–µ", "–î—Ä—É–≥–æ–µ"]
        body = ""
        for g in order:
            body += format_group(g, groups_dict.get(g, {}))
        return header + body + "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

    reports = [
        format_report("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é:", wk_g),
        format_report("üìÖ –ó–∞ –º–µ—Å—è—Ü:", mo_g),
        format_report("üìÖ –ó–∞ –≥–æ–¥:", yr_g)
    ]

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ (—Ä–∞–∑–±–∏—Ç–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    for rpt in reports:
        try:
            if len(rpt) > 4096:
                for i in range(0, len(rpt), 4096):
                    bot.reply_to(message, rpt[i:i+4096], parse_mode="HTML", reply_markup=create_main_menu())
            else:
                bot.reply_to(message, rpt, parse_mode="HTML", reply_markup=create_main_menu())
        except Exception as e:
            print(f"[WARN] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (fallback): {e}")
            # fallback plain
            try:
                bot.reply_to(message, rpt, reply_markup=create_main_menu())
            except Exception as e2:
                print(f"[ERROR] fallback send failed: {e2}")

@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å")
def cancel_subscription(message):
    log_command(message.from_user.id, "–û—Ç–º–µ–Ω–∏—Ç—å")
    bot.send_message(message.chat.id, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.", reply_markup=create_main_menu())

@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    log_command(message.from_user.id, "start")
    referrer_id = message.text.split()[1] if len(message.text.split()) > 1 else None
    user_id = message.from_user.id
    print(f"Start command received. User ID: {user_id}, Referrer ID: {referrer_id}")
    user_data = load_user_data(user_id)
    if user_data:
        if referrer_id:
            bot.reply_to(message, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.", reply_markup=create_main_menu())
        else:
            bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!", reply_markup=create_main_menu())
    else:
        if referrer_id:
            try:
                referrer_id = int(referrer_id)
                referrer_data = load_user_data(referrer_id)
                if referrer_data:
                    referrer_data['invited_users'] = referrer_data.get('invited_users', 0) + 1
                    referrer_data['daily_tokens'] += 100000
                    save_user_data(referrer_data)
            except ValueError:
                print("Invalid referrer ID format")
        user_data = create_default_user(user_id, referrer_id)
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=create_main_menu())
    set_user_assistant(user_id, 'universal_expert')
    if not check_user_subscription(user_id):
        bot.send_message(
            message.chat.id,
            """üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª Guiding Star ‚Äî —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç–∞ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º –∏ –ò–ò.""",
            reply_markup=create_subscription_keyboard()
        )
        return
    bot.send_message(
    message.chat.id,
    """üëã –ü—Ä–∏–≤–µ—Ç
–Ø ‚Äî Finny, —Ç–≤–æ–π –ò–ò-—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –£–∂–µ —Å–µ–≥–æ–¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å:

üßÆ –°–æ—Å—Ç–∞–≤–∏—Ç—å –±—é–¥–∂–µ—Ç –∏ –Ω–∞–π—Ç–∏ +10% —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–µ–Ω–µ–≥ ‚Äî –ø–æ–¥ —Ç–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ü–µ–ª–∏
üõ° –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–µ–±—ë–Ω–∫–∞ –∑–∞ 5 –º–∏–Ω—É—Ç ‚Äî –ø–æ—à–∞–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–æ–≤–µ—Ç—ã
üè¶ –°–Ω–∏–∑–∏—Ç—å –ø–ª–∞—Ç—ë–∂ –ø–æ –∏–ø–æ—Ç–µ–∫–µ –∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–æ 300 —Ç—ã—Å ‚Äî —Ä–∞—Å—á—ë—Ç –≤—ã–≥–æ–¥—ã –∑–∞ 1 –º–∏–Ω—É—Ç—É

–ß—Ç–æ –µ—â—ë —è —É–º–µ—é:
üì∫ <a href="https://telegra.ph/Moj-post-08-12">–í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Äî –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º</a>
üéô –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç ‚Äî –æ–±—â–∞–π—Ç–µ—Å—å —Å –±–æ—Ç–æ–º –≥–æ–ª–æ—Å–æ–º
üåç –ü–æ–∏—Å–∫ –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É ‚Äî –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
ü§ñ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π GPT –æ—Ç OpenAI
üß† GPT-5 ‚Äî —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –ª—é–±–æ–π —Ç–µ–º–µ
üìÇ –£–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏ PDF, XLSX, DOCX, CSV, TXT
üîó –ß—Ç–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ ‚Äî —Ä–∞–∑–±–æ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
üñº –£–º–µ–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏
üé• –£–º–µ–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å YouTube-–≤–∏–¥–µ–æ
üìù –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞

üî∫ –ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏:
Telegram ‚Äî https://t.me/GuidingStarVlog
VK ‚Äî https://vk.com/guidingstarvlog
–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ ‚Äî https://mindsy.ru/""",
    reply_markup=create_main_menu(),
    parse_mode="HTML"
)
# @bot.message_handler(commands=['referral'])
# @bot.message_handler(func=lambda message: message.text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
# def send_referral_link(message):
#     log_command(message.from_user.id, "referral")
#     user_id = message.from_user.id
#     referral_link = generate_referral_link(user_id)
#     bot.reply_to(message, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}", reply_markup=create_main_menu())

def typing(chat_id):
    while True:
        bot.send_chat_action(chat_id, "typing")
        time.sleep(5)


def get_all_users():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö user_id –∏–∑ –±–∞–∑—ã"""
    conn = connect_to_db()
    cur = conn.cursor()
    try:
        cur.execute("SELECT user_id FROM users")
        users = [row[0] for row in cur.fetchall()]
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        users = []
    finally:
        cur.close()
        conn.close()
    return users

@bot.message_handler(commands=['broadcast'])
def broadcast(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=create_main_menu())
        return

    bot.reply_to(message, "üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    bot.register_next_step_handler(message, process_broadcast)


def process_broadcast(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=create_main_menu())
        return

    users = get_all_users()
    success, failed = 0, 0

    bot.reply_to(message, "üì° –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...")

    for user_id in users:
        try:
            if message.content_type == "text":
                bot.send_message(user_id, message.text, reply_markup=create_main_menu())

            elif message.content_type == "photo":
                bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption or "")

            elif message.content_type == "document":
                bot.send_document(user_id, message.document.file_id, caption=message.caption or "")

            elif message.content_type == "video":
                bot.send_video(user_id, message.video.file_id, caption=message.caption or "")

            elif message.content_type == "voice":
                bot.send_voice(user_id, message.voice.file_id, caption=message.caption or "")

            elif message.content_type == "audio":
                bot.send_audio(user_id, message.audio.file_id, caption=message.caption or "")

            else:
                bot.send_message(user_id, "üì¢ (–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è)", reply_markup=create_main_menu())

            success += 1
            time.sleep(0.05)  # –∞–Ω—Ç–∏—Ñ–ª—É–¥

        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")
            failed += 1

    bot.send_message(message.chat.id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {success}\n–û—à–∏–±–æ–∫: {failed}")


def perform_web_search(query: str) -> str:
    endpoint = "https://api.bing.microsoft.com/v7.0/search"
    headers = {"Ocp-Apim-Subscription-Key": BING_API_KEY}
    params = {"q": query, "count": 3, "textDecorations": False, "textFormat": "Raw"}
    try:
        response = requests.get(endpoint, headers=headers, params=params)
        data = response.json()
        web_pages = data.get("webPages", {}).get("value", [])
        if not web_pages:
            return "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞."
        results = "\n".join([f"{item['name']}: {item['url']}" for item in web_pages])
        return results
    except Exception as e:
        print(f"[–û–¢–õ–ê–î–ö–ê] –û—à–∏–±–∫–∞ Bing Search: {str(e)}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."

def needs_web_search(message: str) -> bool:
    keywords = ["–Ω–∞–π–¥–∏", "—á—Ç–æ —Å–µ–π—á–∞—Å", "–Ω–æ–≤–æ—Å—Ç–∏", "–ø–æ–∏—Å–∫", "–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–∞–∫—Ç—É–∞–ª—å–Ω–æ"]
    return any(kw in message.lower() for kw in keywords)

from threading import Thread
from collections import defaultdict
import time

# –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
message_queues = defaultdict(list)
user_processing = defaultdict(bool)  # —Ñ–ª–∞–≥ "–∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def split_message(text, chunk_size=4000):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ chunk_size —Å–∏–º–≤–æ–ª–æ–≤,
    —Å—Ç–∞—Ä–∞—è—Å—å —Ä–µ–∑–∞—Ç—å –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∏–ª–∏ —Ö–æ—Ç—è –±—ã –ø–æ –ø—Ä–æ–±–µ–ª—É.
    """
    chunks = []
    while len(text) > chunk_size:
        # –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Ç–æ—á–∫—É –ø–µ—Ä–µ–¥ –ª–∏–º–∏—Ç–æ–º
        split_at = max(
            text.rfind("\n", 0, chunk_size),
            text.rfind(". ", 0, chunk_size),
            text.rfind(" ", 0, chunk_size)
        )
        if split_at == -1 or split_at < chunk_size // 2:
            split_at = chunk_size  # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Ä–µ–∂–µ–º –ø–æ –ª–∏–º–∏—Ç—É

        chunks.append(text[:split_at].strip())
        text = text[split_at:].strip()
    if text:
        chunks.append(text.strip())
    return chunks


def send_typing(chat_id, stop_flag):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç typing –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã, –ø–æ–∫–∞ stop_flag[0] == False."""
    while not stop_flag[0]:
        try:
            bot.send_chat_action(chat_id, "typing")
        except Exception:
            pass
        time.sleep(3)


def process_user_queue(user_id, chat_id):
    if user_processing[user_id]:
        return
    if not message_queues[user_id]:
        return

    user_processing[user_id] = True
    message = message_queues[user_id].pop(0)

    def _worker():
        stop_flag = [False]
        typing_thread = Thread(target=send_typing, args=(chat_id, stop_flag), daemon=True)
        typing_thread.start()

        try:
            text = message.text
            ai_response = process_text_message(text, chat_id)
            stop_flag[0] = True
            typing_thread.join(timeout=1)
            if isinstance(ai_response, tuple):
                final_answer, sources_block = ai_response
                for chunk in split_message(final_answer, 4000):
                    bot.send_message(chat_id, chunk, reply_markup=None)  # –ò–∑–º–µ–Ω–µ–Ω–æ
                bot.send_message(chat_id, sources_block, disable_web_page_preview=True, reply_markup=None)  # –ò–∑–º–µ–Ω–µ–Ω–æ
            else:
                for chunk in split_message(ai_response, 4000):
                    bot.send_message(chat_id, chunk, reply_markup=None)  # –ò–∑–º–µ–Ω–µ–Ω–æ
        except Exception as e:
            stop_flag[0] = True
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}", reply_markup=None)  # –ò–∑–º–µ–Ω–µ–Ω–æ
        finally:
            user_processing[user_id] = False
            if message_queues[user_id]:
                process_user_queue(user_id, chat_id)

    Thread(target=_worker, daemon=True).start()


@bot.message_handler(func=lambda message: True, content_types=["text"])
def echo_message(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not check_user_subscription(user_id):
        user_data = load_user_data(user_id)
        user_data['pending_query'] = message.text
        save_user_data(user_data)
        bot.send_message(
            chat_id,
            """üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª Guiding Star ‚Äî —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç–∞ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º –∏ –ò–ò.""",
            reply_markup=create_subscription_keyboard()
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    message_queues[user_id].append(message)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ –∑–∞–Ω—è—Ç–∞
    process_user_queue(user_id, chat_id)

# ----------------- –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ) -----------------
def _chunk_text_full(text: str, max_chars: int = 8000, overlap: int = 300):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª–∏–Ω–æ–π <= max_chars, —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º overlap —Å–∏–º–≤–æ–ª–æ–≤.
    –ù–ï –æ–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç: –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –ø–æ–∫—Ä—ã—Ç—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤ (—Å—Ç—Ä–æ–∫).
    """
    if not text:
        return []
    if max_chars <= overlap:
        raise ValueError("max_chars must be > overlap")
    chunks = []
    start = 0
    L = len(text)
    while start < L:
        end = start + max_chars
        chunk = text[start:end]
        chunks.append(chunk)
        # –¥–≤–∏–≥–∞—Ç—å—Å—è –Ω–∞ (max_chars - overlap) —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –±—ã–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç
        start = end - overlap
    return chunks

# ----------------- –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ) -----------------
def _analyze_chunks_with_ai(chunks: list, filename: str, message, user_query: str | None = None):
    """
    –ê–Ω–∞–ª–∏–∑ —á–∞–Ω–∫–æ–≤ –∏ —Å–∏–Ω—Ç–µ–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç ‚Äî –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    –ï—Å–ª–∏ user_query –∑–∞–¥–∞–Ω, –∏—Ç–æ–≥ ‚Äî –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å (–∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–∞–Ω–∫–æ–≤).
    –ï—Å–ª–∏ user_query == None, –∏—Ç–æ–≥ ‚Äî –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä: –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã, –≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
    """
    partials = []
    total = len(chunks)
    for idx, chunk in enumerate(chunks):
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å—Ç–∏ ‚Äî –ø—Ä–æ—Å–∏–º –Ω–µ –¥–µ–ª–∞—Ç—å –æ–±—â–∏–π —Ä–µ–∑—é–º–µ, –∞ –∏–∑–≤–ª–µ—á—å —Ñ–∞–∫—Ç—ã/–¥–∞–Ω–Ω—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—É
        if user_query:
            prompt = (
                f"[–§–∞–π–ª: {filename}] –ß–∞—Å—Ç—å {idx+1}/{total}.\n"
                f""
                "\n\n"
                f"{chunk}\n\n"
                ""
            )
        else:
            prompt = (
                f"[–§–∞–π–ª: {filename}] –ß–∞—Å—Ç—å {idx+1}/{total}.\n"
                "\n"
                "\n\n"
                f"{chunk}\n\n"
                ""
            )

        # –ø–æ–∫–∞–∑–∞—Ç—å typing
        try:
            bot.send_chat_action(message.chat.id, "typing")
        except Exception:
            pass

        try:
            partial = process_text_message(prompt, message.chat.id)
        except Exception as e:
            print(f"[WARN] AI chunk analysis failed (part {idx+1}): {e}")
            partial = f"[–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å—Ç–∏ {idx+1}]"
        partials.append(f"--- –ß–∞—Å—Ç—å {idx+1}/{total} ---\n{partial}\n")

    # –°–∏–Ω—Ç–µ–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º user_query)
    if user_query:
        synthesis_instruct = (
            f"[–§–∞–π–ª: {filename}] –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: ¬´{user_query}¬ª.\n"
            "–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å. "
            "–ï—Å–ª–∏ —Ñ–∞–∫—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî —á–µ—Å—Ç–Ω–æ —É–∫–∞–∂–∏, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ —á—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å. "
            "–û—Ç–≤–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π: 1) –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–ø–æ —Å—É—Ç–∏), 2) –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ, 3) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏/—Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏."
        )
    else:
        synthesis_instruct = (
            f"[–§–∞–π–ª: {filename}] –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ / –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.\n"
            "–ù–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç: 1) –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã (–ø—É–Ω–∫—Ç—ã), "
            "2) –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–ø—É–Ω–∫—Ç—ã), 3) 3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞/–Ω–µ—è—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )

    synthesis_prompt = synthesis_instruct + "\n\n–ß–∞—Å—Ç–∏—á–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã:\n\n" + "\n".join(partials)

    try:
        bot.send_chat_action(message.chat.id, "typing")
    except Exception:
        pass

    try:
        final_analysis = process_text_message(synthesis_prompt, message.chat.id)
    except Exception as e:
        print(f"[ERROR] AI synthesis failed: {e}")
        final_analysis = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞."

    return final_analysis


# –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤ user_data + –æ—Ç–≤–µ—á–∞–µ—Ç —Å —É—á—ë—Ç–æ–º –ø–æ–¥–ø–∏—Å–∏ (caption) –∏–ª–∏ –¥–∞—ë—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
@bot.message_handler(content_types=['document'])
def handle_document(message):
    user_data = load_user_data(message.from_user.id)
    if not user_data:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.", reply_markup=create_main_menu())
        return

    if user_data.get('subscription_plan') == 'free':
        bot.reply_to(message, "–î–ª—è —á—Ç–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ: /pay", reply_markup=create_main_menu())
        return

    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_extension = message.document.file_name.split('.')[-1].lower()

        # —á–∏—Ç–∞–µ–º –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∏–∫–∞–∫–∏—Ö –æ–±—Ä–µ–∑–æ–∫ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏)
        if file_extension == 'txt':
            content = downloaded_file.decode('utf-8', errors='ignore')
        elif file_extension == 'pdf':
            with io.BytesIO(downloaded_file) as pdf_file:
                content = read_pdf(pdf_file)  # –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        elif file_extension == 'docx':
            with io.BytesIO(downloaded_file) as docx_file:
                content = read_docx(docx_file)
        else:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: .txt, .pdf, .docx.", reply_markup=create_main_menu())
            return

        if not content or not content.strip():
            bot.reply_to(message, "–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –≤ –Ω—ë–º –Ω–µ—Ç –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/pdf-—Å–∫–∞–Ω).", reply_markup=create_main_menu())
            return
        
        user_data['last_document'] = {
            'filename': message.document.file_name,
            'content': content,
            'uploaded_at': datetime.datetime.utcnow().isoformat()
        }
        save_user_data(user_data)

        caption = (message.caption or "").strip()
        if caption:
            # build assistant header safely
            assistant_key = user_data.get('assistant') or user_data.get('assistant_id') or user_data.get('current_assistant') or user_data.get('last_assistant')
            assistant_header = ""
            if assistant_key:
                try:
                    cfg = get_assistants_cached() if 'get_assistants_cached' in globals() else load_assistants_config()
                    assistants = cfg.get("assistants", {}) if isinstance(cfg, dict) else {}
                    info = assistants.get(assistant_key)
                    if not info:
                        for k, v in assistants.items():
                            if assistant_key.lower() in k.lower() or assistant_key.lower() == v.get("name","").lower():
                                info = v
                                break
                    if info:
                        ass_name = info.get("name", assistant_key)
                        ass_prompt = info.get("prompt") or info.get("system_prompt") or info.get("system") or ""
                        assistant_header = f"[–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ass_name}]\n{ass_prompt}\n\n" if ass_prompt else f"[–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ass_name}]\n\n"
                except Exception as e:
                    print(f"[WARN] assistant header build failed: {e}")

            combined = assistant_header + f"[–§–∞–π–ª: {message.document.file_name}]\n\n{content}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {caption}"

            # —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞—Ç—å process_text_message –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            bot.send_chat_action(message.chat.id, "typing")
            ai_response = process_text_message(combined, message.chat.id)
            send_in_chunks(message, ai_response)
            return


        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ—Ç –∏–ª–∏ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —É–ø–∞–ª ‚Äî –¥–µ–ª–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π chunked –∞–Ω–∞–ª–∏–∑ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞)
        chunks = _chunk_text_full(content, max_chars=8000, overlap=400)
        user_query = caption if caption else None
        final_analysis = _analyze_chunks_with_ai(chunks, message.document.file_name, message, user_query=user_query)

        # —à–ª—ë–º –æ—Ç–≤–µ—Ç —á–∞—Å—Ç—è–º–∏ (—Ç–µ–ª–µ–≥—Ä–∞–º –ª–∏–º–∏—Ç—ã)
        send_in_chunks(message, final_analysis)
    except Exception as e:
        print(f"[ERROR] handle_document exception: {e}")
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", reply_markup=create_main_menu())


def send_in_chunks(message, text, chunk_size=4000):
    try:
        for i in range(0, len(text), chunk_size):
            bot.reply_to(message, text[i:i+chunk_size], reply_markup=None)  # –ò–∑–º–µ–Ω–µ–Ω–æ
    except Exception as e:
        print(f"[WARN] sending analysis failed: {e}")
        try:
            bot.reply_to(message, text, reply_markup=None)  # –ò–∑–º–µ–Ω–µ–Ω–æ
        except Exception as e2:
            print(f"[ERROR] final send failed: {e2}")
            bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞.", reply_markup=None)  # –ò–∑–º–µ–Ω–µ–Ω–æ

def read_pdf(file):
    content = []
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            text = page.extract_text()
            if text:
                content.append(text)
    return "\n".join(content)

def read_docx(file):
    document = docx.Document(file)
    content = []
    for para in document.paragraphs:
        content.append(para.text)
    return "\n".join(content)

def update_user_tokens(user_id, input_tokens, output_tokens):
    check_and_update_tokens(user_id)
    user_data = load_user_data(user_id)
    # –†–∞—Å—à–∏—Ä—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É: plus —Å –∏–ª–∏ –±–µ–∑ _
    if user_data['subscription_plan'] in ['plus_trial', 'plus_month', 'plus']:
        return True  # –ë–µ–∑–ª–∏–º–∏—Ç –¥–ª—è –≤—Å–µ—Ö Plus-–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    total_tokens_used = input_tokens + output_tokens
    new_tokens = user_data['daily_tokens'] - total_tokens_used
    if new_tokens < 0:
        return False
    user_data['daily_tokens'] = new_tokens
    user_data['input_tokens'] += input_tokens
    user_data['output_tokens'] += output_tokens
    save_user_data(user_data)
    return True

def generate_referral_link(user_id):
    return f"https://t.me/fiinny_bot?start={user_id}"

def process_text_message(text, chat_id) -> str:
    user_data = load_user_data(chat_id)
    if not user_data:
        return "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å /start."
    input_tokens = len(text)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è free
    if user_data['subscription_plan'] == 'free':
        check_and_update_tokens(chat_id)
        user_data = load_user_data(chat_id)
        if user_data['daily_tokens'] < input_tokens:
            return "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: /pay"
    
    # –î–ª—è Plus ‚Äî —Å—Ä–∞–∑—É True, –±–µ–∑ –≤—ã–∑–æ–≤–∞ update_user_tokens
    if user_data['subscription_plan'] in ['plus_trial', 'plus_month', 'plus']:
        # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏, –Ω–æ –±–µ–∑ –ª–∏–º–∏—Ç–∞
        user_data['input_tokens'] += input_tokens
        save_user_data(user_data)
    elif not update_user_tokens(chat_id, input_tokens, 0):
        return "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: /pay"
    
    config = load_assistants_config()
    current_assistant = get_user_assistant(chat_id)
    assistant_settings = config["assistants"].get(current_assistant, {})
    prompt = assistant_settings.get("prompt", "–í—ã –ø—Ä–æ—Å—Ç–æ –±–æ—Ç.")

    if user_data['web_search_enabled'] or needs_web_search(text):
        if user_data['subscription_plan'] == 'free':
            return "–í–µ–±-–ø–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π Plus. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ: /pay"
        print("[DEBUG] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–µ–±-–ø–æ–∏—Å–∫")
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤: –ø–µ—Ä–µ–¥–∞–π—Ç–µ –≤—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (user_id=chat_id, query=text, assistant_key=current_assistant)
        # –¢–∞–∫–∂–µ –Ω–∞–ø—Ä—è–º—É—é –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò
        return _perform_web_search(chat_id, text, current_assistant)

    # –ï—Å–ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫ –Ω–µ –Ω—É–∂–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å –æ–±—ã—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    input_text = f"{prompt}\n\nUser: {text}\nAssistant:"
    history = get_chat_history(chat_id)
    history.append({"role": "user", "content": input_text})
    try:
        chat_completion = openai.ChatCompletion.create(
            model="gpt-5-mini-2025-08-07",
            messages=history
        )
        ai_response = chat_completion.choices[0].message.content
        output_tokens = len(ai_response)
        if not update_user_tokens(chat_id, 0, output_tokens):
            return "–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –≤–∞—à–µ–≥–æ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É"
        user_data = load_user_data(chat_id)
        user_data['total_spent'] += (input_tokens + output_tokens) * 0.000001
        save_user_data(user_data)
        store_message_in_db(chat_id, "user", input_text)
        store_message_in_db(chat_id, "assistant", ai_response)
        return ai_response
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

 # –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ—Ç

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_data = load_user_data(message.from_user.id)
    if not user_data:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.", reply_markup=None)
        return

    if user_data.get('subscription_plan') == 'free':
        bot.reply_to(message, "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ: /pay", reply_markup=None)
        return

    try:
        # –ë–µ—Ä—ë–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        base64_image = base64.b64encode(downloaded_file).decode('utf-8')

        # –ü—Ä–æ–º–ø—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º caption –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        caption = (message.caption or "").strip()
        if caption:
            question = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å: {caption}"
        else:
            question = "–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: –æ–±—ä–µ–∫—Ç—ã, —Ü–≤–µ—Ç–∞, –¥–µ–π—Å—Ç–≤–∏—è, —ç–º–æ—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç."

        # –ü—Ä–æ–º–ø—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        current_assistant = get_user_assistant(message.from_user.id)
        config = load_assistants_config()
        assistant_settings = config["assistants"].get(current_assistant, {})
        prompt = assistant_settings.get("prompt", "–í—ã –ø—Ä–æ—Å—Ç–æ –±–æ—Ç.")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è OpenAI (–º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–µ)
        messages = [
            {"role": "system", "content": prompt},
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": question},
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_image}"
                        }
                    }
                ]
            }
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ: —Ç–µ–∫—Å—Ç + ~1.5x —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –≤ —Å–∏–º–≤–æ–ª–∞—Ö)
        input_tokens = len(question) + len(base64_image) * 3 // 4  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        if user_data['subscription_plan'] == 'free':
            check_and_update_tokens(message.from_user.id)
            user_data = load_user_data(message.from_user.id)
            if user_data['daily_tokens'] < input_tokens:
                bot.reply_to(message, "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: /pay", reply_markup=None)
                return
        if not update_user_tokens(message.from_user.id, input_tokens, 0):
            bot.reply_to(message, "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: /pay", reply_markup=None)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI (–∏—Å–ø–æ–ª—å–∑—É–µ–º gpt-4o-mini –¥–ª—è vision)
        bot.send_chat_action(message.chat.id, "typing")
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",  # –ò–ª–∏ "gpt-4-turbo" –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            messages=messages,
            max_tokens=1000  # –õ–∏–º–∏—Ç –æ—Ç–≤–µ—Ç–∞
        )
        ai_response = response.choices[0].message.content

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
        output_tokens = len(ai_response)
        update_user_tokens(message.from_user.id, 0, output_tokens)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        store_message_in_db(message.chat.id, "user", question)
        store_message_in_db(message.chat.id, "assistant", ai_response)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, ai_response, reply_markup=None, parse_mode='HTML' if '<' in ai_response else None)

    except Exception as e:
        print(f"[ERROR] handle_photo exception: {e}")
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=None)

@bot.message_handler(content_types=["voice"])
def voice(message):
    user_data = load_user_data(message.from_user.id)
    if user_data['subscription_plan'] == 'free':
        bot.reply_to(message, "–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ: /pay", reply_markup=create_main_menu())
        return
    try:
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_file:
            temp_file.write(downloaded_file)
            temp_file.flush()
            audio = AudioSegment.from_ogg(temp_file.name)
            wav_temp_file = tempfile.NamedTemporaryFile(suffix=".wav", delete=False)
            audio.export(wav_temp_file.name, format="wav")
            with open(wav_temp_file.name, 'rb') as wav_file:
                response = openai.Audio.transcribe(
                    model="whisper-1",
                    file=wav_file
                )
        recognized_text = response['text'].strip()
        if len(recognized_text) > 1000000:
            bot.reply_to(message, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ.", reply_markup=create_main_menu())
            return
        if not recognized_text:
            bot.reply_to(message, "–¢–µ–∫—Å—Ç –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=create_main_menu())
            return
        ai_response = process_text_message(recognized_text, message.chat.id)
        bot.reply_to(message, ai_response, reply_markup=None)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!", reply_markup=create_main_menu())

def handler(event, context):
    try:
        body = event.get("body", "")
        if not body:
            print(f"[WARN] –ü—É—Å—Ç–æ–π body –≤ handler")
            return {"statusCode": 200, "body": "ok"}
        
        message = json.loads(body)
        update = telebot.types.Update.de_json(message)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: update –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º Update, –Ω–µ int –∏–ª–∏ –¥—Ä—É–≥–∏–º
        if not isinstance(update, telebot.types.Update):
            print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ update (—Ç–∏–ø: {type(update)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {message})")
            return {"statusCode": 200, "body": "ok"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ message, callback_query –∏–ª–∏ pre_checkout_query
        if update.message or update.callback_query or update.pre_checkout_query:
            try:
                bot.process_new_updates([update])
            except telebot.apihelper.ApiTelegramException as e:
                if e.error_code == 403:
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                else:
                    print(f"–û—à–∏–±–∫–∞ API Telegram: {e}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        else:
            print(f"[WARN] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º update –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π: {message}")
    except json.JSONDecodeError as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ handler: {e}")
    except Exception as e:
        print(f"[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ handler: {e}")
    
    return {"statusCode": 200, "body": "ok"}


def check_experts_in_database(connection):
    with connection.cursor() as cursor:
        cursor.execute("SELECT expert_id, name, specialization FROM experts;")

def main():
    logger.info("Bot started")
    conn = None
    max_retries = 5
    for attempt in range(max_retries):
        try:
            conn = connect_to_db()
            create_command_logs_table()
            check_and_create_columns(conn)
            create_subscription_tables(conn)
            with conn.cursor() as cursor:
                cursor.execute("SELECT COUNT(*) FROM assistants;")
                count = cursor.fetchone()[0]
            if count == 0:
                logger.warning("–¢–∞–±–ª–∏—Ü–∞ 'assistants' –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SQL.")
            else:
                logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤...")
                refresh_assistants_cache(conn)
            logger.info("–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤...")
            insert_initial_experts(conn)
            check_experts_in_database(conn)
            assistants_config = load_assistants_config()
            setup_bot_commands()
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                time.sleep(5)
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
                return
        finally:
            if conn:
                conn.close()

    # –ó–∞–ø—É—Å–∫ polling –≤ —Ü–∏–∫–ª–µ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    while True:
        try:
            logger.info("Starting polling...")
            bot.polling(non_stop=True, timeout=60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
            time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        try:
            schedule.run_pending()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ schedule.run_pending: {e}")
        time.sleep(60)

if __name__ == "__main__":
    main()