import logging
import telebot
import os
import openai
import json
from typing import Final
from telebot.types import BotCommand
import time
import io
from telebot import types
import docx
import pdfplumber
import datetime
import requests
from database import *
import schedule

print(f"Connecting to DB: {os.getenv('DB_NAME')}, User: {os.getenv('DB_USER')}, Host: {os.getenv('DB_HOST')}")
connect_to_db()

MIN_TOKENS_THRESHOLD: Final = 5000
FREE_DAILY_TOKENS: Final = 10000

logger = telebot.logger
telebot.logger.setLevel(logging.INFO)
pay_token = os.getenv('PAY_TOKEN')
bot = telebot.TeleBot(os.getenv('BOT_TOKEN'), threaded=False)
openai.api_key = os.getenv('OPENAI_API_KEY')

BING_API_KEY = os.getenv('BING_API_KEY', "yLtkhrR3H6UjzBm3naReSJQ8G81ct409iLrcmQTeIAH338TwBZNEvSLQJ8og")

class ExceptionHandler:
    def handle(self, exception):
        if isinstance(exception, telebot.apihelper.ApiTelegramException):
            if exception.error_code == 403:
                try:
                    error_text = str(exception)
                    import re
                    match = re.search(r'chat_id=(\d+)', error_text)
                    if match:
                        user_id = match.group(1)
                        conn = connect_to_db()
                        cur = conn.cursor()
                        cur.execute("SELECT username FROM users WHERE user_id = %s", (user_id,))
                        result = cur.fetchone()
                        username = result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                        cur.close()
                        conn.close()
                        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. ID: {user_id}, Username: {username}")
                    else:
                        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID. –û—à–∏–±–∫–∞: {error_text}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    print(f"–ò—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞: {exception}")
                return True
        return False

bot.exception_handler = ExceptionHandler()

def create_command_logs_table():
    conn = connect_to_db()
    with conn.cursor() as cursor:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS command_logs (
                log_id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                command VARCHAR(255) NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        conn.commit()
    conn.close()

def log_command(user_id, command):
    conn = connect_to_db()
    with conn.cursor() as cursor:
        cursor.execute("""
            INSERT INTO command_logs (user_id, command, timestamp)
            VALUES (%s, %s, CURRENT_TIMESTAMP)
        """, (user_id, command))
        conn.commit()
    conn.close()

def get_command_stats(period):
    conn = connect_to_db()
    with conn.cursor() as cursor:
        if period == 'week':
            cursor.execute("""
                SELECT command, COUNT(*) as count
                FROM command_logs
                WHERE timestamp >= CURRENT_DATE - INTERVAL '7 days'
                GROUP BY command
                ORDER BY count DESC;
            """)
        elif period == 'month':
            cursor.execute("""
                SELECT command, COUNT(*) as count
                FROM command_logs
                WHERE timestamp >= CURRENT_DATE - INTERVAL '30 days'
                GROUP BY command
                ORDER BY count DESC;
            """)
        elif period == 'year':
            cursor.execute("""
                SELECT command, COUNT(*) as count
                FROM command_logs
                WHERE timestamp >= CURRENT_DATE - INTERVAL '1 year'
                GROUP BY command
                ORDER BY count DESC;
            """)
        stats = cursor.fetchall()
    conn.close()
    return stats

def setup_bot_commands():
    commands = [
        BotCommand("profile", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand("language", "üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫"),
        BotCommand("assistants", "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã"),
        BotCommand("experts", "üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç—ã"),
        BotCommand("search", "üîç –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫"),
        BotCommand("pay", "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"),
        BotCommand("cancel_subscription", "‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏"),
        BotCommand("new", "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"),
        BotCommand("support", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        BotCommand("referral", "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"),  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /referral
    ]
    try:
        bot.set_my_commands(commands)
        print("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥: {e}")

def create_price_menu() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(
        keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–ü—Ä–æ–±–Ω–∞—è (3 –¥–Ω—è –∑–∞ 99‚ÇΩ)",
                    callback_data="buy_trial"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="–ù–µ–¥–µ–ª—å–Ω–∞—è - 149‚ÇΩ",
                    callback_data="buy_week"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="–ú–µ—Å—è—á–Ω–∞—è - 399‚ÇΩ",
                    callback_data="buy_month"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="–ì–æ–¥–æ–≤–∞—è - 2499‚ÇΩ",
                    callback_data="buy_year"
                )
            ],
        ]
    )
    return markup

def create_subscription_required_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(
        text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        callback_data="show_pay_menu"
    ))
    return keyboard

load_assistants_config()

REQUIRED_CHANNEL_ID = "@GuidingStarVlog"
SUBSCRIPTION_CHECK_CACHE = {}

def check_user_subscription(user_id):
    try:
        if user_id in SUBSCRIPTION_CHECK_CACHE:
            last_check, is_subscribed = SUBSCRIPTION_CHECK_CACHE[user_id]
            if (datetime.datetime.now() - last_check).total_seconds() < 3600:
                return is_subscribed
        chat_member = bot.get_chat_member(chat_id=REQUIRED_CHANNEL_ID, user_id=user_id)
        status = chat_member.status
        is_subscribed = status in ['member', 'administrator', 'creator']
        SUBSCRIPTION_CHECK_CACHE[user_id] = (datetime.datetime.now(), is_subscribed)
        return is_subscribed
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        return True

def create_subscription_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/GuidingStarVlog")
    check_button = types.InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")
    keyboard.add(url_button)
    keyboard.add(check_button)
    return keyboard

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def subscription_check_callback(call):
    user_id = call.from_user.id
    log_command(user_id, "check_subscription")
    if user_id in SUBSCRIPTION_CHECK_CACHE:
        del SUBSCRIPTION_CHECK_CACHE[user_id]
    if check_user_subscription(user_id):
        set_user_assistant(user_id, 'universal_expert')
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º."
        )
    else:
        bot.answer_callback_query(
            call.id,
            "–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.",
            show_alert=True
        )

@bot.callback_query_handler(func=lambda call: call.data == "show_pay_menu")
def show_pay_menu_callback(call):
    log_command(call.from_user.id, "show_pay_menu")
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="""–ü–æ–¥–ø–∏—Å–∫–∞ Plus –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫:
- GPT-4.0
- –ß—Ç–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–æ–≤
- –ß—Ç–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
- –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

‚ö†Ô∏è –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (3 –¥–Ω—è –∑–∞ 99‚ÇΩ) –≤–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 399‚ÇΩ. –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.

–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:
- –ü—Ä–æ–±–Ω–∞—è: 3 –¥–Ω—è –∑–∞ 99‚ÇΩ
- –ù–µ–¥–µ–ª—å–Ω–∞—è: 149‚ÇΩ
- –ú–µ—Å—è—á–Ω–∞—è: 399‚ÇΩ
- –ì–æ–¥–æ–≤–∞—è: 2499‚ÇΩ

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: https://t.me/mon_tti1""",
        reply_markup=create_price_menu()
    )

def create_main_menu():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    profile_btn = types.KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    language_btn = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫")
    assistants_btn = types.KeyboardButton("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã")
    experts_btn = types.KeyboardButton("–≠–∫—Å–ø–µ—Ä—Ç—ã")
    search_btn = types.KeyboardButton("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–∏—Å–∫")
    pay_btn = types.KeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞")
    cancel_subscription_btn = types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
    new_btn = types.KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞")
    support_btn = types.KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    keyboard.add(profile_btn, language_btn)
    keyboard.add(assistants_btn, experts_btn)
    keyboard.add(search_btn, pay_btn)
    keyboard.add(cancel_subscription_btn, new_btn)
    keyboard.add(support_btn)
    return keyboard

def create_assistants_menu():
    config = load_assistants_config()
    assistants = config.get("assistants", {})
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for assistant_id, assistant_info in assistants.items():
        keyboard.add(
            types.InlineKeyboardButton(
                text=assistant_info['name'],
                callback_data=f"select_assistant_{assistant_id}"
            )
        )
    return keyboard

def create_experts_menu():
    conn = connect_to_db()
    experts = get_all_experts(conn)
    conn.close()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for expert in experts:
        expert_id, name, specialization, *_ = expert
        keyboard.add(types.InlineKeyboardButton(
            text=f"{name} - {specialization}",
            callback_data=f"expert_{expert_id}"
        ))
    return keyboard

@bot.message_handler(commands=['assistants'])
@bot.message_handler(func=lambda message: message.text == "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã")
def assistants_button_handler(message):
    log_command(message.from_user.id, "assistants")
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:",
        reply_markup=create_assistants_menu()
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_assistant_"))
def assistant_callback_handler(call):
    assistant_id = call.data.split("_")[-1]
    log_command(call.from_user.id, f"select_assistant_{assistant_id}")
    config = load_assistants_config()
    print(f"[DEBUG] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã: {config['assistants'].keys()}")
    if assistant_id in config['assistants']:
        set_user_assistant(call.from_user.id, assistant_id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–í—ã–±—Ä–∞–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: {config['assistants'][assistant_id]['name']}"
        )
    else:
        print(f"[ERROR] –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç {assistant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        bot.answer_callback_query(call.id, "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

@bot.message_handler(commands=['experts'])
@bot.message_handler(func=lambda message: message.text == "–≠–∫—Å–ø–µ—Ä—Ç—ã")
def experts_button_handler(message):
    log_command(message.from_user.id, "experts")
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–∞:",
        reply_markup=create_experts_menu()
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("expert_"))
def expert_callback_handler(call):
    expert_id = int(call.data.split("_")[1])
    log_command(call.from_user.id, f"expert_{expert_id}")
    conn = connect_to_db()
    expert = get_expert_by_id(conn, expert_id)
    conn.close()
    if not expert:
        bot.answer_callback_query(call.id, "–≠–∫—Å–ø–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    expert_id, name, specialization, description, photo_url, telegram_username, contact_info, is_available = expert
    keyboard = types.InlineKeyboardMarkup()
    if telegram_username:
        keyboard.add(types.InlineKeyboardButton(
            text="–ù–∞–ø–∏—Å–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç—É",
            url=f"https://t.me/{telegram_username.replace('@', '')}"
        ))
    message_text = f"*{name}*\n_{specialization}_\n\n{description}\n\n"
    if contact_info:
        message_text += f"*–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n{contact_info}"
    if photo_url:
        try:
            bot.send_photo(
                call.message.chat.id,
                photo=photo_url,
                caption=message_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —ç–∫—Å–ø–µ—Ä—Ç–∞: {e}")
            bot.send_message(
                call.message.chat.id,
                message_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
    else:
        bot.send_message(
            call.message.chat.id,
            message_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def back_button_handler(message):
    log_command(message.from_user.id, "–ù–∞–∑–∞–¥")
    bot.send_message(
        message.chat.id,
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=create_main_menu()
    )

@bot.message_handler(func=lambda message: message.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
def profile_button_handler(message):
    log_command(message.from_user.id, "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    show_profile(message)

@bot.message_handler(commands=["pay"])
@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–ø–∏—Å–∫–∞")
def get_pay(message):
    log_command(message.from_user.id, "pay")
    bot.send_message(
        message.chat.id,
        """–ü–æ–¥–ø–∏—Å–∫–∞ Plus –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫:
- GPT-4.0
- –ß—Ç–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–æ–≤
- –ß—Ç–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
- –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

‚ö†Ô∏è –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (3 –¥–Ω—è –∑–∞ 99‚ÇΩ) –≤–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 399‚ÇΩ. –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.

–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:
- –ü—Ä–æ–±–Ω–∞—è: 3 –¥–Ω—è –∑–∞ 99‚ÇΩ
- –ù–µ–¥–µ–ª—å–Ω–∞—è: 149‚ÇΩ
- –ú–µ—Å—è—á–Ω–∞—è: 399‚ÇΩ
- –ì–æ–¥–æ–≤–∞—è: 2499‚ÇΩ

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: https://t.me/mon_tti1""",
        reply_markup=create_price_menu()
    )

@bot.callback_query_handler(func=lambda callback: callback.data in ["buy_trial", "buy_week", "buy_month", "buy_year"])
def buy_subscription(callback):
    user_id = callback.from_user.id
    user_data = load_user_data(user_id)
    if not user_data:
        bot.send_message(callback.message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        if callback.data == "buy_trial":
            if user_data['trial_used']:
                bot.send_message(callback.message.chat.id, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.")
                return
            price = 99  # –í—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–º –¥–æ 2 —Ä—É–±–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            period = "trial"
            duration_days = 3
        elif callback.data == "buy_week":
            price = 149
            period = "week"
            duration_days = 7
        elif callback.data == "buy_month":
            price = 399
            period = "month"
            duration_days = 30
        elif callback.data == "buy_year":
            price = 2499
            period = "year"
            duration_days = 365
        amount_in_kopecks = price * 100
        print(f"[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á—ë—Ç–∞ –¥–ª—è user_id={user_id}, period={period}, amount={amount_in_kopecks} –∫–æ–ø–µ–µ–∫")
        bot.send_invoice(
            callback.message.chat.id,
            title=f"–ü–æ–¥–ø–∏—Å–∫–∞ Plus ({period})",
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {duration_days} –¥–Ω–µ–π",
            invoice_payload=f"plus_{period}",
            provider_token=pay_token,
            currency="RUB",
            start_parameter="test_bot",
            prices=[types.LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ Plus ({period})", amount=amount_in_kopecks)]
        )
    except telebot.apihelper.ApiTelegramException as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á—ë—Ç–∞: {e}")
        bot.send_message(
            callback.message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: https://t.me/mon_tti1"
        )

@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def successful_pay(message):
    payload = message.successful_payment.invoice_payload
    user_id = message.from_user.id
    conn = connect_to_db()
    cur = conn.cursor()
    if payload.startswith("plus_"):
        period = payload.split("_")[1]
        if period == "trial":
            duration_days = 3
            cur.execute("UPDATE users SET trial_used = TRUE WHERE user_id = %s", (user_id,))
        elif period == "week":
            duration_days = 7
        elif period == "month":
            duration_days = 30
        elif period == "year":
            duration_days = 365
        start_date = datetime.datetime.now().date()
        end_date = start_date + datetime.timedelta(days=duration_days)
        cur.execute("""
            UPDATE users 
            SET subscription_plan = %s,
                subscription_start_date = %s,
                subscription_end_date = %s,
                web_search_enabled = TRUE,
                auto_renewal = %s
            WHERE user_id = %s
        """, (f"plus_{period}", start_date, end_date, period == "trial", user_id))
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(
            message.chat.id, 
            f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–ü–æ–¥–ø–∏—Å–∫–∞ Plus ({period}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {end_date.strftime("%d.%m.%Y")}\n'
            f'–í–µ–±-–ø–æ–∏—Å–∫: –≤–∫–ª—é—á—ë–Ω\n'
            f'–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {"–≤–∫–ª—é—á–µ–Ω–æ" if period == "trial" else "–≤—ã–∫–ª—é—á–µ–Ω–æ"}'
        )
    else:
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏.")

def check_auto_renewal():
    conn = connect_to_db()
    cur = conn.cursor()
    today = datetime.datetime.now().date()
    cur.execute("""
        SELECT user_id FROM users 
        WHERE subscription_plan = 'plus_trial' 
        AND subscription_end_date <= %s
        AND auto_renewal = TRUE
    """, (today,))
    users = cur.fetchall()
    for user_id in users:
        user_id = user_id[0]
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YooKassa –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç—ã 399 —Ä—É–±–ª–µ–π
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫–æ–¥ (–Ω—É–∂–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API YooKassa):
        # payment_result = make_payment(user_id, amount=399)
        # if payment_result:
        #     start_date = today
        #     end_date = start_date + datetime.timedelta(days=30)
        #     cur.execute("""
        #         UPDATE users 
        #         SET subscription_plan = 'plus_month',
        #             subscription_start_date = %s,
        #             subscription_end_date = %s
        #         WHERE user_id = %s
        #     """, (start_date, end_date, user_id))
        #     bot.send_message(user_id, "–í–∞—à–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 399‚ÇΩ.")
        # else:
        #     bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    conn.commit()
    cur.close()
    conn.close()

schedule.every().day.at("00:00").do(check_auto_renewal)

@bot.message_handler(commands=['new'])
@bot.message_handler(func=lambda message: message.text == "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞")
def clear_chat_history(message):
    log_command(message.from_user.id, "new")
    chat_id = message.chat.id
    conn = connect_to_db()
    cur = conn.cursor()
    cur.execute("DELETE FROM chat_history WHERE chat_id = %s", (chat_id,))
    conn.commit()
    cur.close()
    conn.close()
    set_user_assistant(message.from_user.id, 'universal_expert')
    bot.reply_to(message, "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º.")

def create_language_menu():
    keyboard = types.InlineKeyboardMarkup(row_width=3)  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    languages = [
        ("–†–æ—Å—Å–∏—è", "ru", "üá∑üá∫"),
        ("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "en", "üá¨üáß"),
        ("–§—Ä–∞–Ω—Ü–∏—è", "fr", "üá´üá∑"),
        ("–ì–µ—Ä–º–∞–Ω–∏—è", "de", "üá©üá™"),
        ("–¢—É—Ä—Ü–∏—è", "tr", "üáπüá∑"),
        ("–ë—Ä–∞–∑–∏–ª–∏—è", "pt", "üáßüá∑"),
        ("–ú–µ–∫—Å–∏–∫–∞", "es", "üá≤üáΩ"),
        ("–ò—Ç–∞–ª–∏—è", "it", "üáÆüáπ"),
        ("–ò–Ω–¥–∏—è", "hi", "üáÆüá≥"),
        ("–ö–∏—Ç–∞–π", "zh", "üá®üá≥"),
    ]
    for lang_name, lang_code, emoji in languages:
        keyboard.add(types.InlineKeyboardButton(
            text=f"{emoji} {lang_name}",
            callback_data=f"lang_{lang_code}"
        ))
    return keyboard

@bot.message_handler(commands=['language'])
@bot.message_handler(func=lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫")
def language_handler(message):
    log_command(message.from_user.id, "language")
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        reply_markup=create_language_menu()
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def language_callback_handler(call):
    lang_code = call.data.split("_")[-1]
    log_command(call.from_user.id, f"lang_{lang_code}")
    user_data = load_user_data(call.from_user.id)
    if user_data:
        user_data['language'] = lang_code
        save_user_data(user_data)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {lang_code.upper()}"
        )
    else:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
    bot.answer_callback_query(call.id)

@bot.message_handler(commands=['search'])
@bot.message_handler(func=lambda message: message.text == "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–∏—Å–∫")
def search_handler(message):
    user_id = message.from_user.id
    user_data = load_user_data(user_id)
    if not user_data:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å /start.")
        return
    if user_data['subscription_plan'] == 'free':
        bot.reply_to(
            message,
            "üåê –í–µ–±-–ø–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π Plus.\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!",
            reply_markup=create_subscription_required_keyboard()
        )
        log_command(user_id, "search_denied_no_subscription")
        return
    new_state = not user_data['web_search_enabled']
    user_data['web_search_enabled'] = new_state
    save_user_data(user_data)
    log_command(user_id, f"search_{'on' if new_state else 'off'}")
    status_text = "–≤–∫–ª—é—á—ë–Ω" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω"
    bot.reply_to(message, f"–í–µ–±-–ø–æ–∏—Å–∫ {status_text}.")

@bot.message_handler(commands=['support'])
@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
def support_handler(message):
    log_command(message.from_user.id, "support")
    bot.reply_to(message, "–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - https://t.me/mon_tti1")

@bot.message_handler(commands=['cancel_subscription'])
@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
def cancel_subscription_handler(message):
    user_id = message.from_user.id
    user_data = load_user_data(user_id)
    if not user_data or user_data['subscription_plan'] == 'free':
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    conn = connect_to_db()
    cur = conn.cursor()
    cur.execute("""
        UPDATE users 
        SET auto_renewal = FALSE,
            subscription_plan = 'free',
            subscription_end_date = NULL,
            web_search_enabled = FALSE
        WHERE user_id = %s
    """, (user_id,))
    conn.commit()
    cur.close()
    conn.close()
    bot.reply_to(message, "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")

def check_and_update_tokens(user_id):
    conn = connect_to_db()
    cur = conn.cursor()
    cur.execute(""" 
        SELECT daily_tokens, subscription_plan, last_token_update, last_warning_time, subscription_end_date 
        FROM users WHERE user_id = %s 
    """, (user_id,))
    user_data = cur.fetchone()
    if not user_data:
        cur.close()
        conn.close()
        return
    tokens, current_plan, last_update, last_warning_time, subscription_end_date = user_data
    current_date = datetime.datetime.now().date()
    if isinstance(last_update, str):
        last_update_date = datetime.datetime.strptime(last_update, '%Y-%m-%d').date()
    else:
        last_update_date = last_update
    if current_plan != 'free' and subscription_end_date and current_date > subscription_end_date:
        cur.execute(""" 
            UPDATE users 
            SET subscription_plan = 'free', 
                daily_tokens = %s,
                subscription_end_date = NULL,
                web_search_enabled = FALSE
            WHERE user_id = %s 
        """, (FREE_DAILY_TOKENS, user_id))
        try:
            bot.send_message(
                user_id,
                "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –í–µ–±-–ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: /pay"
            )
        except telebot.apihelper.ApiTelegramException as e:
            if e.error_code == 403:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
            else:
                print(f"–û—à–∏–±–∫–∞ API –¥–ª—è {user_id}: {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")
    if tokens <= MIN_TOKENS_THRESHOLD and current_plan == 'free':
        if current_date > last_update_date:
            cur.execute(""" 
                UPDATE users 
                SET daily_tokens = %s, 
                    last_token_update = %s 
                WHERE user_id = %s 
            """, (FREE_DAILY_TOKENS, current_date, user_id))
    conn.commit()
    cur.close()
    conn.close()

@bot.message_handler(commands=['profile'])
def show_profile(message):
    log_command(message.from_user.id, "profile")
    user_id = message.from_user.id
    user_data = load_user_data(user_id)
    if not user_data:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å /start.")
        return
    subscription_end_date = user_data.get('subscription_end_date')
    remaining_days = None
    if user_data['subscription_plan'] != 'free' and subscription_end_date:
        today = datetime.datetime.now().date()
        remaining_days = (subscription_end_date - today).days
        if remaining_days < 0:
            remaining_days = 0
    invited_users = user_data['invited_users']
    referral_text = (
        "üôÅ –í—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞."
        if invited_users == 0
        else f"üéâ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {invited_users} –¥—Ä—É–∑–µ–π"
    )
    web_search_status = "–≤–∫–ª—é—á—ë–Ω" if user_data['web_search_enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω" if user_data['subscription_plan'].startswith('plus_') else "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus)"
    profile_text = f"""
ID: {user_id}

–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: {user_data['subscription_plan'].capitalize()}
"""
    if user_data['subscription_plan'] != 'free' and remaining_days is not None:
        profile_text += f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ {remaining_days} –¥–Ω–µ–π\n"
    profile_text += f"""
–í–µ–±-–ø–æ–∏—Å–∫: {web_search_status}

–û—Å—Ç–∞–≤—à–∞—è—Å—è –∫–≤–æ—Ç–∞:
GPT-4o: {user_data['daily_tokens']} —Å–∏–º–≤–æ–ª–æ–≤

üè∑ –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:
üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${user_data['total_spent']:.4f}

üìù –í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {user_data['input_tokens']}
üìù –í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {user_data['output_tokens']}
üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {invited_users}
{referral_text}
{'üë§ –í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: ' + str(user_data['referrer_id']) if user_data['referrer_id'] else '–í—ã –Ω–µ –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∏–∫–µ–º.'}
–ß—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É: {generate_referral_link(user_id)}
–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–∂–º–∏—Ç–µ /pay
"""
    bot.send_message(message.chat.id, profile_text)

ADMIN_IDS = [998107476, 741831495]

@bot.message_handler(commands=['statsadmin12'])
def show_stats_admin(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    log_command(message.from_user.id, "statsadmin12")
    week_stats = get_command_stats('week')
    month_stats = get_command_stats('month')
    year_stats = get_command_stats('year')
    command_names = {
        'profile': '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
        'language': '–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫',
        'assistants': '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã',
        'experts': '–≠–∫—Å–ø–µ—Ä—Ç—ã',
        'search_on': '–í–∫–ª—é—á–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫',
        'search_off': '–í—ã–∫–ª—é—á–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫',
        'search_denied_no_subscription': '–ü–æ–ø—ã—Ç–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏',
        'pay': '–ü–æ–¥–ø–∏—Å–∫–∞',
        'cancel_subscription': '–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
        'new': '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞',
        'support': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        'statsadmin12': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)',
        'check_subscription': '‚úÖ –ù–∞–∂–∞—Ç–∏–µ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"',
        'show_pay_menu': '–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏'
    }
    stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥* üìä\n\n"
    stats_text += "üìÖ *–ó–∞ –Ω–µ–¥–µ–ª—é:*\n"
    stats_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    for command, count in week_stats:
        display_name = command_names.get(command, command)
        stats_text += f"üîπ {display_name}: {count} —Ä–∞–∑\n"
    stats_text += "\nüìÖ *–ó–∞ –º–µ—Å—è—Ü:*\n"
    stats_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    for command, count in month_stats:
        display_name = command_names.get(command, command)
        stats_text += f"üîπ {display_name}: {count} —Ä–∞–∑\n"
    stats_text += "\nüìÖ *–ó–∞ –≥–æ–¥:*\n"
    stats_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    for command, count in year_stats:
        display_name = command_names.get(command, command)
        stats_text += f"üîπ {display_name}: {count} —Ä–∞–∑\n"
    stats_text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    try:
        bot.reply_to(message, stats_text, parse_mode="Markdown")
    except Exception as e:
        stats_text_plain = stats_text.replace("*", "").replace("_", "")
        bot.reply_to(message, stats_text_plain)

@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å")
def cancel_subscription(message):
    log_command(message.from_user.id, "–û—Ç–º–µ–Ω–∏—Ç—å")
    bot.send_message(message.chat.id, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    log_command(message.from_user.id, "start")
    referrer_id = message.text.split()[1] if len(message.text.split()) > 1 else None
    user_id = message.from_user.id
    print(f"Start command received. User ID: {user_id}, Referrer ID: {referrer_id}")
    user_data = load_user_data(user_id)
    if user_data:
        if referrer_id:
            bot.reply_to(message, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
        else:
            bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!")
    else:
        if referrer_id:
            try:
                referrer_id = int(referrer_id)
                referrer_data = load_user_data(referrer_id)
                if referrer_data:
                    referrer_data['invited_users'] = referrer_data.get('invited_users', 0) + 1
                    referrer_data['daily_tokens'] += 100000
                    save_user_data(referrer_data)
            except ValueError:
                print("Invalid referrer ID format")
        user_data = create_default_user(user_id, referrer_id)
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    set_user_assistant(user_id, 'universal_expert')
    if not check_user_subscription(user_id):
        bot.send_message(
            message.chat.id,
            """üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª Guiding Star ‚Äî —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç–∞ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º –∏ –ò–ò.""",
            reply_markup=create_subscription_keyboard()
        )
        return
    bot.send_message(message.chat.id, """–ü—Ä–∏–≤–µ—Ç, —è –§–∏–Ω–Ω–∏! üëã
–Ø ‚Äî —Ç–≤–æ–π –¥—Ä—É–≥ –∏ –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤! üèÜ –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –ª—ë–≥–∫–∏–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º ‚Äî –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–≤–æ–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–ª–∏ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π.
üí° –ß—Ç–æ —è —É–º–µ—é:
üéØ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ª—é–±—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö ‚Äî –æ—Ç –±–∞–∑–æ–≤—ã—Ö –æ—Å–Ω–æ–≤ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
üìö –Ø –∞–¥–∞–ø—Ç–∏—Ä—É—é –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–¥ —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π, —Ç–∞–∫ —á—Ç–æ –Ω–µ –≤–æ–ª–Ω—É–π—Å—è, –µ—Å–ª–∏ —Ç—ã –Ω–æ–≤–∏—á–æ–∫ ‚Äî –≤—Å—ë –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ!
üîç –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∫–∞–∫ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ª—É—á—à–µ —É—Å–≤–æ–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞—Ö.
ü§ù –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º! –ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —à–∞–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è ‚Äî –ø–∏—à–∏, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è.
üí¨ –£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –ø–æ —Ä–∞–∑–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Ç–µ–º–∞–º ‚Äî –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –∫—Ä–µ–¥–∏—Ç—ã, –Ω–∞–ª–æ–≥–∏, –±–∏–∑–Ω–µ—Å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–º—É –∏ –ø–æ–ª—É—á–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!
üí¨ –•–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏? –õ–µ–≥–∫–æ! –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–º—É –∏ –ø–æ–ª—É—á–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.""", reply_markup=create_main_menu())

@bot.message_handler(commands=['referral'])
def send_referral_link(message):
    log_command(message.from_user.id, "referral")
    user_id = message.from_user.id
    referral_link = generate_referral_link(user_id)
    bot.reply_to(message, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}")

def typing(chat_id):
    while True:
        bot.send_chat_action(chat_id, "typing")
        time.sleep(5)

def send_broadcast(message_content, photo=None):
    conn = connect_to_db()
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM users")
    users = cur.fetchall()
    for user in users:
        try:
            if photo:
                bot.send_photo(user[0], photo, caption=message_content)
            else:
                bot.send_message(user[0], message_content)
        except telebot.apihelper.ApiTelegramException as e:
            if e.error_code == 403:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[0]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                continue
            else:
                print(f"–û—à–∏–±–∫–∞ API –¥–ª—è {user[0]}: {e}")
                continue
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
            continue
    cur.close()
    conn.close()

@bot.message_handler(commands=["broadcast"])
def broadcast(message):
    if message.from_user.id == 998107476:
        msg = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(msg, process_broadcast)
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏.")

def process_broadcast(message):
    if message.content_type == 'photo':
        photo = message.photo[-1].file_id
        caption = message.caption if message.caption else ""
        send_broadcast(caption, photo=photo)
    else:
        send_broadcast(message.text)
    bot.reply_to(message, "–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

@bot.message_handler(content_types=['photo'])
def handle_broadcast_photo(message):
    if message.from_user.id == 998107476 and message.caption and message.caption.startswith('/broadcast'):
        photo = message.photo[-1].file_id
        caption = message.caption.replace('/broadcast', '').strip()
        send_broadcast(caption, photo=photo)
        bot.reply_to(message, "–†–∞—Å—Å—ã–ª–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def perform_web_search(query: str) -> str:
    endpoint = "https://api.bing.microsoft.com/v7.0/search"
    headers = {"Ocp-Apim-Subscription-Key": BING_API_KEY}
    params = {"q": query, "count": 3, "textDecorations": False, "textFormat": "Raw"}
    try:
        response = requests.get(endpoint, headers=headers, params=params)
        data = response.json()
        web_pages = data.get("webPages", {}).get("value", [])
        if not web_pages:
            return "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞."
        results = "\n".join([f"{item['name']}: {item['url']}" for item in web_pages])
        return results
    except Exception as e:
        print(f"[–û–¢–õ–ê–î–ö–ê] –û—à–∏–±–∫–∞ Bing Search: {str(e)}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."

def needs_web_search(message: str) -> bool:
    keywords = ["–Ω–∞–π–¥–∏", "—á—Ç–æ —Å–µ–π—á–∞—Å", "–Ω–æ–≤–æ—Å—Ç–∏", "–ø–æ–∏—Å–∫", "–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–∞–∫—Ç—É–∞–ª—å–Ω–æ"]
    return any(kw in message.lower() for kw in keywords)

@bot.message_handler(func=lambda message: True, content_types=["text"])
def echo_message(message):
    if not check_user_subscription(message.from_user.id):
        bot.send_message(
            message.chat.id,
            """üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª Guiding Star ‚Äî —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç–∞ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º –∏ –ò–ò.""",
            reply_markup=create_subscription_keyboard()
        )
        return
    bot.send_chat_action(message.chat.id, "typing")
    try:
        text = message.text
        ai_response = process_text_message(text, message.chat.id)
        bot.reply_to(message, ai_response)
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! {e}")

@bot.message_handler(content_types=['document'])
def handle_document(message):
    user_data = load_user_data(message.from_user.id)
    if user_data['subscription_plan'] == 'free':
        bot.reply_to(message, "–î–ª—è —á—Ç–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ: /pay")
        return
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    file_extension = message.document.file_name.split('.')[-1].lower()
    try:
        if file_extension == 'txt':
            content = downloaded_file.decode('utf-8')
            bot.reply_to(message, process_text_message(content, message.chat.id))
        elif file_extension == 'pdf':
            with io.BytesIO(downloaded_file) as pdf_file:
                content = read_pdf(pdf_file)
                bot.reply_to(message, process_text_message(content, message.chat.id))
        elif file_extension == 'docx':
            with io.BytesIO(downloaded_file) as docx_file:
                content = read_docx(docx_file)
                bot.reply_to(message, process_text_message(content, message.chat.id))
        else:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: .txt, .pdf, .docx.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

def read_pdf(file):
    content = []
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            text = page.extract_text()
            if text:
                content.append(text)
    return "\n".join(content)

def read_docx(file):
    document = docx.Document(file)
    content = []
    for para in document.paragraphs:
        content.append(para.text)
    return "\n".join(content)

def update_user_tokens(user_id, input_tokens, output_tokens):
    check_and_update_tokens(user_id)
    user_data = load_user_data(user_id)
    if user_data['subscription_plan'].startswith('plus_'):
        return True
    total_tokens_used = input_tokens + output_tokens
    new_tokens = user_data['daily_tokens'] - total_tokens_used
    if new_tokens < 0:
        return False
    user_data['daily_tokens'] = new_tokens
    user_data['input_tokens'] += input_tokens
    user_data['output_tokens'] += output_tokens
    save_user_data(user_data)
    return True

def generate_referral_link(user_id):
    return f"https://t.me/fiinny_bot?start={user_id}"

def process_text_message(text, chat_id) -> str:
    user_data = load_user_data(chat_id)
    if user_data['subscription_plan'] == 'free':
        return "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ: /pay"
    input_tokens = len(text)
    if not update_user_tokens(chat_id, input_tokens, 0):
        return "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
    config = load_assistants_config()
    current_assistant = get_user_assistant(chat_id)
    assistant_settings = config["assistants"].get(current_assistant, {})
    prompt = assistant_settings.get("prompt", "–í—ã –ø—Ä–æ—Å—Ç–æ –±–æ—Ç.")
    if needs_web_search(text) and user_data['web_search_enabled']:
        print("[–û–¢–õ–ê–î–ö–ê] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞")
        search_results = perform_web_search(text)
        text += f"\n\n[–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞]:\n{search_results}"
    input_text = f"{prompt}\n\nUser: {text}\nAssistant:"
    history = get_chat_history(chat_id)
    history.append({"role": "user", "content": input_text})
    try:
        chat_completion = openai.ChatCompletion.create(
            model="gpt-4.1-mini-2025-04-14",
            messages=history
        )
        ai_response = chat_completion.choices[0].message.content
        output_tokens = len(ai_response)
        if not update_user_tokens(chat_id, 0, output_tokens):
            return "–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –≤–∞—à–µ–≥–æ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤."
        user_data = load_user_data(chat_id)
        user_data['total_spent'] += (input_tokens + output_tokens) * 0.000001
        save_user_data(user_data)
        store_message_in_db(chat_id, "user", input_text)
        store_message_in_db(chat_id, "assistant", ai_response)
        return ai_response
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

import tempfile
from pydub import AudioSegment

@bot.message_handler(content_types=["voice"])
def voice(message):
    user_data = load_user_data(message.from_user.id)
    if user_data['subscription_plan'] == 'free':
        bot.reply_to(message, "–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ Plus. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ: /pay")
        return
    try:
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_file:
            temp_file.write(downloaded_file)
            temp_file.flush()
            audio = AudioSegment.from_ogg(temp_file.name)
            wav_temp_file = tempfile.NamedTemporaryFile(suffix=".wav", delete=False)
            audio.export(wav_temp_file.name, format="wav")
            with open(wav_temp_file.name, 'rb') as wav_file:
                response = openai.Audio.transcribe(
                    model="whisper-1",
                    file=wav_file
                )
        recognized_text = response['text'].strip()
        if len(recognized_text) > 1000000:
            bot.reply_to(message, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ.")
            return
        if not recognized_text:
            bot.reply_to(message, "–¢–µ–∫—Å—Ç –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        ai_response = process_text_message(recognized_text, message.chat.id)
        bot.reply_to(message, ai_response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")

def handler(event, context):
    message = json.loads(event["body"])
    update = telebot.types.Update.de_json(message)
    allowed_updates=["message", "callback_query", "pre_checkout_query"]
    if update.message is not None:
        try:
            bot.process_new_updates([update])
        except telebot.apihelper.ApiTelegramException as e:
            if e.error_code == 403:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
            else:
                print(f"–û—à–∏–±–∫–∞ API Telegram: {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    return {
        "statusCode": 200,
        "body": "ok",
    }

def check_experts_in_database(connection):
    with connection.cursor() as cursor:
        cursor.execute("SELECT expert_id, name, specialization FROM experts;")
        experts = cursor.fetchall()
        print("–≠–∫—Å–ø–µ—Ä—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        for expert in experts:
            print(f"ID: {expert[0]}, –ò–º—è: {expert[1]}, –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {expert[2]}")

if __name__ == "__main__":
    print("Bot started")
    conn = connect_to_db()
    try:
        create_command_logs_table()
        check_and_create_columns(conn)
        with conn.cursor() as cursor:
            cursor.execute("SELECT COUNT(*) FROM assistants;")
            count = cursor.fetchone()[0]
        if count == 0:
            print("–¢–∞–±–ª–∏—Ü–∞ 'assistants' –ø—É—Å—Ç–∞. –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ.")
            insert_initial_data(conn)
        print("–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤...")
        insert_initial_experts(conn)
        check_experts_in_database(conn)
        assistants_config = load_assistants_config()
        setup_bot_commands()
        bot.polling(none_stop=True)  # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
        while True:
            schedule.run_pending()
            time.sleep(60)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    finally:
        if conn:
            conn.close()