import logging
import telebot
import os
import openai
import json
import boto3

import time
import io
from telebot import types
import docx
import PyPDF2
import pdfplumber
import datetime
from database import *
import psycopg2

TG_BOT_TOKEN = os.environ.get("TG_BOT_TOKEN")
PROXY_API_KEY = os.environ.get("PROXY_API_KEY")
YANDEX_KEY_ID = os.environ.get("YANDEX_KEY_ID")
YANDEX_KEY_SECRET = os.environ.get("YANDEX_KEY_SECRET")
YANDEX_BUCKET = os.environ.get("YANDEX_BUCKET")
YOUR_ADMIN_ID = os.environ.get("YOUR_ADMIN_ID")
YOUR_PROVIDER_TOKEN = os.environ.get("YOUR_PROVIDER_TOKEN")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
connect_to_db()
insert_initial_data(connect_to_db())

SUBSCRIPTION_PLANS = {
    "free": {"price": 0, "tokens": 20000},  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω
    "basic": {"price": 149, "tokens": 300000},  # –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω
    "advanced": {"price": 499, "tokens": 600000},  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
    "premium": {"price": 899, "tokens": 1000000},  # –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω
    "unlimited": {"price": 1599, "tokens": 5000000},  # –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
}

logger = telebot.logger
telebot.logger.setLevel(logging.INFO)
pay_token = "live_I1XQU2cDLDo9p_QN4nu5LLn1xC0yfZTUByVckEsRjJg"

bot = telebot.TeleBot("7738522562:AAHMDy0fMzWgRIjMgGbPA9-OiKtvnINILOg", threaded=False)
client = openai.Client(api_key="sk-IdmJMXNU1gZPbd1Isu38a1IqFVW3jZQ0", base_url="https://api.proxyapi.ru/openai/v1")


def create_price_menu() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(
        keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–ë–∞–∑–æ–≤—ã–π - 149p",
                    callback_data="buy_rate_149"
                ),
                types.InlineKeyboardButton(
                    text="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π - 499p",
                    callback_data="buy_rate_499"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="–ü—Ä–µ–º–∏—É–º - 899p",
                    callback_data="buy_rate_899"
                ),
                types.InlineKeyboardButton(
                    text="–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π - 1599p",
                    callback_data="buy_rate_1599"
                )
            ],
        ]
    )
    return markup


def get_s3_client():
    session = boto3.session.Session(
        aws_access_key_id=YANDEX_KEY_ID, aws_secret_access_key=YANDEX_KEY_SECRET
    )
    return session.client(
        service_name="s3", endpoint_url="https://storage.yandexcloud.net"
    )


CONFIG_FILE = 'assistants_config.json'


# –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
load_assistants_config()



# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
def load_chat_ids():
    try:
        with open("/function/storage/subscribers/subscribers.txt", "r") as file:
            return {line.strip() for line in file.readlines()}
    except FileNotFoundError:
        return set()


def save_chat_id(chat_id):
    with open("//function/storage/subscribers/subscribers.txt", "a") as file:
        file.write(str(chat_id) + "\n")


current_assistant = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
def setup_assistant_handlers():
    config = load_assistants_config()
    assistants = config.get("assistants", {})

    for assistant_id, assistant_info in assistants.items():
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        @bot.message_handler(func=lambda message, name=assistant_info['name']: message.text == name)
        def handle_assistant(message, assistant_id=assistant_id):
            global current_assistant
            current_assistant = assistant_id  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            bot.reply_to(message, f"–¢–µ–∫—É—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {message.text}.")


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
@bot.message_handler(func=lambda message: message.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
def profile_button_handler(message):
    show_profile(message)


@bot.message_handler(commands=["pay"])
@bot.message_handler(func=lambda message: message.text == "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
def get_pay(message) -> None:
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:",
        reply_markup=create_price_menu()
    )


@bot.callback_query_handler(func=lambda callback: callback.data.startswith("buy_rate_"))
def buy_rate(callback) -> None:
    price = int(callback.data.split("_")[-1])
    bot.send_invoice(
        callback.message.chat.id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞ {price}",
        description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞",
        invoice_payload="month_subscription",
        provider_token="381764678:TEST:106386",
        currency="RUB",
        start_parameter="test_bot",
        prices=[
            types.LabeledPrice(label="–¢–∞—Ä–∏—Ñ", amount=price * 100)
        ]
    )


@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_query) -> None:
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)



@bot.message_handler(content_types=['successful_payment'])
def successful_pay(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    bot.send_message(message.chat.id, '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.')



@bot.message_handler(commands=['profile'])
def show_profile(message):
    user_id = message.from_user.id
    user_data = load_user_data(user_id)

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π
    invited_users = user_data['invited_users']  # –¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª–µ –≤—Å–µ–≥–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    referrer_id = user_data['referrer_id']  # –¢–æ –∂–µ —Å–∞–º–æ–µ –∑–¥–µ—Å—å

    profile_text = f"""
ID: {user_id}

–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: Free

–û—Å—Ç–∞–≤—à–∞—è—Å—è –∫–≤–æ—Ç–∞:
GPT-4o mini: {user_data['daily_tokens']} —Å–∏–º–≤–æ–ª–æ–≤

üè∑ –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:
üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${user_data['total_spent']:.4f}

üìù –í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {user_data['input_tokens']}
üìù –í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {user_data['output_tokens']}
üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {invited_users}
{'üôÅ –í—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞.' if invited_users == 0 else f'üéâ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {invited_users} –¥—Ä—É–∑–µ–π'}
{'üë§ –í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: ' + str(referrer_id) if referrer_id else '–í—ã –Ω–µ –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∏–∫–µ–º.'}
–ß—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É: {generate_referral_link(user_id)}
–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–∂–º–∏—Ç–µ /pay
"""
    bot.send_message(message.chat.id, profile_text)


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
setup_assistant_handlers()


@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å")
def cancel_subscription(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.send_message(message.chat.id, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=['pay'])
def send_subscription_options(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    for plan_name, plan_info in SUBSCRIPTION_PLANS.items():
        price_label = f"{plan_info['price']} ‚ÇΩ"
        keyboard.add(types.KeyboardButton(text=f"{plan_name.capitalize()} - {price_label}"))

    keyboard.add(types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=create_price_menu())


def setup_subscription_handlers():
    for plan_name, plan_info in SUBSCRIPTION_PLANS.items():
        price_label = f"{plan_info['price']} ‚ÇΩ"
        plan_button_text = f"{plan_name.capitalize()} - {price_label}"

        @bot.message_handler(func=lambda message, text=plan_button_text: message.text == text)
        def handle_subscription(message, plan=plan_name):
            price = SUBSCRIPTION_PLANS[plan]['price'] * 100
            user_id = message.from_user.id

            bot.send_invoice(
                chat_id=message.chat.id,
                title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {plan.capitalize()}",
                description=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω {plan.capitalize()}.",
                provider_token=YOUR_PROVIDER_TOKEN,
                currency='RUB',
                prices=[types.LabeledPrice(label=plan.capitalize(), amount=price)],
                start_parameter=f'{plan}_subscription',
                invoice_payload=f'–û–ø–ª–∞—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}'
            )


setup_subscription_handlers()


@bot.pre_checkout_query_handler(func=lambda query: True)
def pre_checkout_handler(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@bot.message_handler(content_types=['successful_payment'])
def successful_pay(message):
    bot.send_message(message.chat.id, '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.')


@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    referrer_id = message.text.split()[1] if len(message.text.split()) > 1 else None
    user_id = message.from_user.id

    print(f"Start command received. User ID: {user_id}, Referrer ID: {referrer_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = load_user_data(user_id)

    if referrer_id:
        if user_data:
            bot.reply_to(message, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
            return  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

        try:
            referrer_id = int(referrer_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            referrer_data = load_user_data(referrer_id)

            if referrer_data:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                referrer_data['invited_users'] = referrer_data.get('invited_users', 0) + 1
                # –ü–æ–≤—ã—à–∞–µ–º –∫–≤–æ—Ç—É —Å–∏–º–≤–æ–ª–æ–≤ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                referrer_data['daily_tokens'] += 100000  # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º 100000 —Å–∏–º–≤–æ–ª–æ–≤
                save_user_data(referrer_data)

        except ValueError:
            print("Invalid referrer ID format")

    # # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    # if user_data is None:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    #     user_data = create_default_user(user_id)

    #     # –û–±–Ω–æ–≤–ª—è–µ–º referrer_id –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #     if referrer_id:
    #         user_data['referrer_id'] = referrer_id  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º referrer_id
    #     save_user_data(user_data)

    config = load_assistants_config()
    assistants = config.get("assistants", {})

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä–≤–æ–π
    profile_btn = types.KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    keyboard.add(profile_btn)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
    config = load_assistants_config()
    assistants = config.get("assistants", {})

    for assistant_id, assistant_info in assistants.items():
        button = types.KeyboardButton(assistant_info['name'])  # –ò–º—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        keyboard.add(button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id, """–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –§–∏–Ω–Ω–∏

üèÜ –Ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ—Ç –≤ Telegram —Å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤ –º–∏—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤. 

üéØ –ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å—Ç–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ –≥—Ä–∞–º–æ—Ç–Ω—ã–º, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–≤–æ–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–ª–∏ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π.

–í–æ—Ç –∫–∞–∫ –º—ã –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å:

–í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è: –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏–ª–∏ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏. –í—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:

üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å
üí∞–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É 
üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ
üè° –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
üí° –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
üí∏ –ö—Ä–µ–¥–∏—Ç—ã –∏ –∑–∞–π–º—ã
üîê –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
üè¶ –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ
üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã

üìö –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: –Ø –∞–¥–∞–ø—Ç–∏—Ä—É—é –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π. –ï—Å–ª–∏ —Ç—ã –Ω–æ–≤–∏—á–æ–∫, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π ‚Äî —è –æ–±—ä—è—Å–Ω—é –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∏ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.
üîç –ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é? –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ 3 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–ø—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –ø—É—Ç–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏, –Ω–µ –∑–∞–ø—É—Ç—ã–≤–∞—è—Å—å –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞—Ö.
ü§ù –¢–≤–æ—è –ø–æ–º–æ—â—å –≤ –æ–±—É—á–µ–Ω–∏–∏: –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —à–∞–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è""",
                     reply_markup=keyboard)


@bot.message_handler(commands=['referral'])
def send_referral_link(message):
    user_id = message.from_user.id
    referral_link = generate_referral_link(user_id)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    bot.reply_to(message, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π


@bot.message_handler(commands=['cybersecurity', 'tax_payment_consultant', 'consultant_on_benefits_for_large_families',
                               'financial_literacy_assistant', 'business_creation_consultant', 'economics_consultant'])
def set_assistant(message):
    global current_assistant  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    command = message.text[1:]  # –£–±–∏—Ä–∞–µ–º '/'
    config = load_assistants_config()
    assistants = config.get("assistants", {})

    if command in assistants:
        current_assistant = command
        assistant_name = assistants[command]['name']  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        bot.reply_to(message, f"–¢–µ–∫—É—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {current_assistant}.")
    else:
        bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ –º–µ–Ω—é.")


def typing(chat_id):
    while True:
        bot.send_chat_action(chat_id, "typing")
        time.sleep(5)


def send_broadcast(message_content, photo=None):
    with open("/function/storage/users/users.json", "r") as file:
        users = json.load(file)

    for user in users:
        try:
            if photo:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
                bot.send_photo(user['user_id'], photo, caption=message_content)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                bot.send_message(user['user_id'], message_content)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
            continue


@bot.message_handler(commands=["broadcast"])
def broadcast(message):
    if message.from_user.id == 998107476:
        msg = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(msg, process_broadcast)
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏.")


def process_broadcast(message):
    if message.content_type == 'photo':
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = message.photo[-1].file_id
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        caption = message.caption if message.caption else ""
        send_broadcast(caption, photo=photo)
    else:
        # –û–±—ã—á–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        send_broadcast(message.text)

    bot.reply_to(message, "–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def handle_broadcast_photo(message):
    if message.from_user.id == 998107476 and message.caption and message.caption.startswith('/broadcast'):
        photo = message.photo[-1].file_id
        caption = message.caption.replace('/broadcast', '').strip()
        send_broadcast(caption, photo=photo)
        bot.reply_to(message, "–†–∞—Å—Å—ã–ª–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


@bot.message_handler(commands=["new"])
def clear_history(message):
    clear_history_for_chat(message.chat.id)
    bot.reply_to(message, "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")


@bot.message_handler(func=lambda message: True, content_types=["text"])
def echo_message(message):
    bot.send_chat_action(message.chat.id, "typing")

    try:
        text = message.text
        ai_response = process_text_message(text, message.chat.id)
        bot.reply_to(message, ai_response)
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! {e}")


@bot.message_handler(content_types=['document'])
def handle_document(message):
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    file_extension = message.document.file_name.split('.')[-1].lower()

    try:
        if file_extension == 'txt':
            content = downloaded_file.decode('utf-8')
            bot.reply_to(message, process_text_message(content, message.chat.id))

        elif file_extension == 'pdf':
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ BytesIO –¥–ª—è PDF
            with io.BytesIO(downloaded_file) as pdf_file:
                content = read_pdf(pdf_file)
                bot.reply_to(message, process_text_message(content, message.chat.id))

        elif file_extension == 'docx':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º BytesIO –¥–ª—è DOCX
            with io.BytesIO(downloaded_file) as docx_file:
                content = read_docx(docx_file)
                bot.reply_to(message, process_text_message(content, message.chat.id))

        else:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: .txt, .pdf, .docx.")

    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")


def read_pdf(file):
    content = []
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            text = page.extract_text()
            if text:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
                content.append(text)
    return "\n".join(content)


def read_docx(file):
    document = docx.Document(file)
    content = []
    for para in document.paragraphs:
        content.append(para.text)
    return "\n".join(content)




def update_user_tokens(user_id, input_tokens, output_tokens):
    user_data = load_user_data(user_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
    last_reset = datetime.datetime.strptime(user_data['last_reset'], '%Y-%m-%d').date()
    if datetime.datetime.now().date() > last_reset:
        user_data['daily_tokens'] = 20000  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        user_data['last_reset'] = str(datetime.datetime.now().date())

    # –í—ã—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    new_tokens = user_data['daily_tokens'] - (input_tokens + output_tokens)
    if new_tokens < 0:
        return False

    user_data['daily_tokens'] = new_tokens
    user_data['input_tokens'] += input_tokens  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    user_data['output_tokens'] += output_tokens  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    save_user_data(user_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return True


def generate_referral_link(user_id):
    return f"https://t.me/filling33_bot?start={user_id}"

def process_text_message(text, chat_id) -> str:
    input_tokens = len(text)

    if not update_user_tokens(chat_id, input_tokens, 0):
        return "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."

    global current_assistant
    config = load_assistants_config()
    assistant_settings = config["assistants"].get(current_assistant, {})
    prompt = assistant_settings.get("prompt", "–í—ã –ø—Ä–æ—Å—Ç–æ –±–æ—Ç.")
    input_text = f"{prompt}\n\nUser: {text}\nAssistant:"

    # # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    # s3client = get_s3_client()
    history = []
    # try:
    #     history_object_response = s3client.get_object(
    #         Bucket=YANDEX_BUCKET, Key=f"{chat_id}.json"
    #     )
    #     history = json.loads(history_object_response["Body"].read())
    # except:
    #     pass

    history.append({"role": "user", "content": input_text})

    try:
        chat_completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=history
        )

        ai_response = chat_completion.choices[0].message.content
        output_tokens = len(ai_response)

        if not update_user_tokens(chat_id, 0, output_tokens):
            return "–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤."

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤
        user_data = load_user_data(chat_id)
        user_data['total_spent'] += (input_tokens + output_tokens) * 0.000001  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Ç–æ–∫–µ–Ω
        save_user_data(user_data)

        history.append({"role": "assistant", "content": ai_response})

        # # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        # s3client.put_object(
        #     Bucket=YANDEX_BUCKET,
        #     Key=f"{chat_id}.json",
        #     Body=json.dumps(history),
        # )

        return ai_response

    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"


def clear_history_for_chat(chat_id):
    try:
        s3client = get_s3_client()
        s3client.put_object(
            Bucket=YANDEX_BUCKET,
            Key=f"{chat_id}.json",
            Body=json.dumps([]),
        )
    except:
        pass


@bot.message_handler(func=lambda msg: msg.voice.mime_type == "audio/ogg", content_types=["voice"])
def voice(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    file_info = bot.get_file(message.voice.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Whisper
        response = client.audio.transcriptions.create(
            file=("file.ogg", downloaded_file, "audio/ogg"),
            model="whisper-1",
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        recognized_text = response.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if len(recognized_text) > 1000000:
            bot.reply_to(message, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –µ–≥–æ.")
            return

        if not recognized_text:
            bot.reply_to(message, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        ai_response = process_text_message(recognized_text, message.chat.id)
        bot.reply_to(message, ai_response)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")


def handler(event, context):
    message = json.loads(event["body"])
    update = telebot.types.Update.de_json(message)
    allowed_updates=["message", "callback_query", "pre_checkout_query", "buy_rate_149"]
    # –£–¥–∞–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if update.message is not None:
        try:
            bot.process_new_updates([update])
        except Exception as e:
            print(e)

    return {
        "statusCode": 200,
        "body": "ok",
    }


if __name__ == "__main__":
    print("Bot starte1")
    
    bot.polling()
    conn = connect_to_db()
    # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if conn:
        conn.close()



print("Bot started2")      